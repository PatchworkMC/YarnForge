--- a/net/minecraft/item/Item.java
+++ b/net/minecraft/item/Item.java
@@ -43,8 +43,8 @@
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
 
-public class Item implements ItemConvertible {
-   public static final Map<Block, Item> BLOCK_ITEMS = Maps.newHashMap();
+public class Item extends net.minecraftforge.registries.ForgeRegistryEntry<Item> implements ItemConvertible, net.minecraftforge.common.extensions.IForgeItem {
+   public static final Map<Block, Item> BLOCK_ITEMS = net.minecraftforge.registries.GameData.getBlockItemMap();
    protected static final UUID ATTACK_DAMAGE_MODIFIER_ID = UUID.fromString("CB3F55D3-645C-4F38-A497-9C13A33DB5CF");
    protected static final UUID ATTACK_SPEED_MODIFIER_ID = UUID.fromString("FA233E1C-4180-4865-B01B-BCCE9785ACA3");
    protected static final Random RANDOM = new Random();
@@ -80,6 +80,10 @@
       this.maxCount = properties.maxCount;
       this.foodComponent = properties.foodComponent;
       this.fireproof = properties.fireproof;
+      this.canRepair = properties.canRepair;
+      this.toolClasses.putAll(properties.toolClasses);
+      Object tmp = properties.ister == null ? null : net.minecraftforge.fml.DistExecutor.callWhenOn(Dist.CLIENT, properties.ister);
+      this.ister = tmp == null ? null : () -> (net.minecraft.client.render.item.BuiltinModelItemRenderer) tmp;
    }
 
    public void usageTick(World worldIn, LivingEntity livingEntityIn, ItemStack stack, int count) {
@@ -123,10 +127,12 @@
       return this.isFood() ? entityLiving.eatFood(worldIn, stack) : stack;
    }
 
+   @Deprecated // Use ItemStack sensitive version.
    public final int getMaxCount() {
       return this.maxCount;
    }
 
+   @Deprecated // Use ItemStack sensitive version.
    public final int getMaxDamage() {
       return this.maxDamage;
    }
@@ -181,10 +187,12 @@
    }
 
    @Nullable
+   @Deprecated // Use ItemStack sensitive version.
    public final Item getRecipeRemainder() {
       return this.recipeRemainder;
    }
 
+   @Deprecated // Use ItemStack sensitive version.
    public boolean hasRecipeRemainder() {
       return this.recipeRemainder != null;
    }
@@ -244,7 +252,7 @@
    }
 
    public boolean isEnchantable(ItemStack stack) {
-      return this.getMaxCount() == 1 && this.isDamageable();
+      return this.getItemStackLimit(stack) == 1 && this.isDamageable(stack);
    }
 
    protected static BlockHitResult raycast(World worldIn, PlayerEntity player, RaycastContext.FluidHandling fluidMode) {
@@ -257,8 +265,8 @@
       float f5 = MathHelper.sin(-f * ((float)Math.PI / 180F));
       float f6 = f3 * f4;
       float f7 = f2 * f4;
-      double d0 = 5.0D;
-      Vec3d vector3d1 = vector3d.add((double)f6 * 5.0D, (double)f5 * 5.0D, (double)f7 * 5.0D);
+      double d0 = player.getAttributeInstance(net.minecraftforge.common.ForgeMod.REACH_DISTANCE.get()).getValue();;
+      Vec3d vector3d1 = vector3d.add((double)f6 * d0, (double)f5 * d0, (double)f7 * d0);
       return worldIn.raycast(new RaycastContext(vector3d, vector3d1, RaycastContext.ShapeType.OUTLINE, fluidMode, player));
    }
 
@@ -274,6 +282,7 @@
    }
 
    protected boolean isIn(ItemGroup group) {
+      if (getCreativeTabs().stream().anyMatch(tab -> tab == group)) return true;
       ItemGroup itemgroup = this.getGroup();
       return itemgroup != null && (group == ItemGroup.SEARCH || group == itemgroup);
    }
@@ -287,10 +296,44 @@
       return false;
    }
 
+   @Deprecated // Use ItemStack sensitive version.
    public Multimap<EntityAttribute, EntityAttributeModifier> getAttributeModifiers(EquipmentSlot equipmentSlot) {
       return ImmutableMultimap.of();
    }
 
+   @Nullable
+   private final java.util.function.Supplier<net.minecraft.client.render.item.BuiltinModelItemRenderer> ister;
+   private final java.util.Map<net.minecraftforge.common.ToolType, Integer> toolClasses = Maps.newHashMap();
+   private final net.minecraftforge.common.util.ReverseTagWrapper<Item> reverseTags = new net.minecraftforge.common.util.ReverseTagWrapper<>(this, net.minecraft.tag.ItemTags::getTagGroup);
+   protected final boolean canRepair;
+
+   @Override
+   public boolean isRepairable(ItemStack stack) {
+      return canRepair && isDamageable(stack);
+   }
+
+   @Override
+   public java.util.Set<net.minecraftforge.common.ToolType> getToolTypes(ItemStack stack) {
+      return toolClasses.keySet();
+   }
+
+   @Override
+   public int getHarvestLevel(ItemStack stack, net.minecraftforge.common.ToolType tool, @Nullable PlayerEntity player, @Nullable BlockState blockState) {
+      return toolClasses.getOrDefault(tool, -1);
+   }
+
+   @Environment(EnvType.CLIENT)
+   @Override
+   public final net.minecraft.client.render.item.BuiltinModelItemRenderer getItemStackTileEntityRenderer() {
+      net.minecraft.client.render.item.BuiltinModelItemRenderer renderer = ister != null ? ister.get() : null;
+      return renderer != null ? renderer : net.minecraft.client.render.item.BuiltinModelItemRenderer.INSTANCE;
+   }
+
+   @Override
+   public java.util.Set<net.minecraft.util.Identifier> getTags() {
+      return reverseTags.getTagNames();
+   }
+
    public boolean isUsedOnRelease(ItemStack stack) {
       return stack.getItem() == Items.CROSSBOW;
    }
@@ -336,6 +379,9 @@
       private Rarity rarity = Rarity.COMMON;
       private FoodComponent foodComponent;
       private boolean fireproof;
+      private boolean canRepair = true;
+      private java.util.Map<net.minecraftforge.common.ToolType, Integer> toolClasses = Maps.newHashMap();
+      private java.util.function.Supplier<java.util.concurrent.Callable<net.minecraft.client.render.item.BuiltinModelItemRenderer>> ister;
 
       public Item.Settings food(FoodComponent foodIn) {
          this.foodComponent = foodIn;
@@ -380,5 +426,20 @@
          this.fireproof = true;
          return this;
       }
+
+      public Item.Settings setNoRepair() {
+         canRepair = false;
+         return this;
+      }
+
+      public Item.Settings addToolType(net.minecraftforge.common.ToolType type, int level) {
+         toolClasses.put(type, level);
+         return this;
+      }
+
+      public Item.Settings setISTER(java.util.function.Supplier<java.util.concurrent.Callable<net.minecraft.client.render.item.BuiltinModelItemRenderer>> ister) {
+         this.ister = ister;
+         return this;
+      }
    }
 }
