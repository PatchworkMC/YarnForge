--- a/net/minecraft/item/BlockItem.java
+++ b/net/minecraft/item/BlockItem.java
@@ -71,8 +71,8 @@
                   }
                }
 
-               BlockSoundGroup soundtype = blockstate1.getSoundGroup();
-               world.playSound(playerentity, blockpos, this.getPlaceSound(blockstate1), SoundCategory.BLOCKS, (soundtype.getVolume() + 1.0F) / 2.0F, soundtype.getPitch() * 0.8F);
+               BlockSoundGroup soundtype = blockstate1.getSoundType(world, blockpos, context.getPlayer());
+               world.playSound(playerentity, blockpos, this.getPlaceSound(blockstate1, world, blockpos, context.getPlayer()), SoundCategory.BLOCKS, (soundtype.getVolume() + 1.0F) / 2.0F, soundtype.getPitch() * 0.8F);
                if (playerentity == null || !playerentity.abilities.creativeMode) {
                   itemstack.decrement(1);
                }
@@ -83,10 +83,16 @@
       }
    }
 
+   @Deprecated //Forge: Use more sensitive version {@link BlockItem#getPlaceSound(BlockState, IBlockReader, BlockPos, Entity) }
    protected SoundEvent getPlaceSound(BlockState state) {
       return state.getSoundGroup().getPlaceSound();
    }
 
+   //Forge: Sensitive version of BlockItem#getPlaceSound
+   protected SoundEvent getPlaceSound(BlockState state, World world, BlockPos pos, PlayerEntity entity) {
+      return state.getSoundType(world, pos, entity).getPlaceSound();
+   }
+
    @Nullable
    public ItemPlacementContext getPlacementContext(ItemPlacementContext context) {
       return context;
@@ -194,10 +200,18 @@
    }
 
    public Block getBlock() {
+      return this.getBlockRaw() == null ? null : this.getBlockRaw().delegate.get();
+   }
+
+   private Block getBlockRaw() {
       return this.block;
    }
 
    public void appendBlocks(Map<Block, Item> blockToItemMap, Item itemIn) {
       blockToItemMap.put(this.getBlock(), itemIn);
    }
+
+   public void removeFromBlockToItemMap(Map<Block, Item> blockToItemMap, Item itemIn) {
+      blockToItemMap.remove(this.getBlock());
+   }
 }
