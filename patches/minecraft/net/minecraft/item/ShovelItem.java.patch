--- a/net/minecraft/item/ShovelItem.java
+++ b/net/minecraft/item/ShovelItem.java
@@ -22,7 +22,7 @@
    protected static final Map<Block, BlockState> PATH_STATES = Maps.newHashMap(ImmutableMap.of(Blocks.GRASS_BLOCK, Blocks.GRASS_PATH.getDefaultState()));
 
    public ShovelItem(ToolMaterial tier, float attackDamageIn, float attackSpeedIn, Item.Settings builder) {
-      super(attackDamageIn, attackSpeedIn, tier, EFFECTIVE_BLOCKS, builder);
+      super(attackDamageIn, attackSpeedIn, tier, EFFECTIVE_BLOCKS, builder.addToolType(net.minecraftforge.common.ToolType.SHOVEL, tier.getMiningLevel()));
    }
 
    public boolean isEffectiveOn(BlockState blockIn) {
@@ -37,9 +37,9 @@
          return ActionResult.PASS;
       } else {
          PlayerEntity playerentity = context.getPlayer();
-         BlockState blockstate1 = PATH_STATES.get(blockstate.getBlock());
+         BlockState blockstate1 = blockstate.getToolModifiedState(world, blockpos, playerentity, context.getStack(), net.minecraftforge.common.ToolType.SHOVEL);
          BlockState blockstate2 = null;
-         if (blockstate1 != null && world.getBlockState(blockpos.up()).isAir()) {
+         if (blockstate1 != null && world.isAir(blockpos.up())) {
             world.playSound(playerentity, blockpos, SoundEvents.ITEM_SHOVEL_FLATTEN, SoundCategory.BLOCKS, 1.0F, 1.0F);
             blockstate2 = blockstate1;
          } else if (blockstate.getBlock() instanceof CampfireBlock && blockstate.get(CampfireBlock.LIT)) {
@@ -67,4 +67,9 @@
          }
       }
    }
+
+   @javax.annotation.Nullable
+   public static BlockState getShovelPathingState(BlockState originalState) {
+      return PATH_STATES.get(originalState.getBlock());
+   }
 }
