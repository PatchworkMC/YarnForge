--- a/net/minecraft/item/FoodComponent.java
+++ b/net/minecraft/item/FoodComponent.java
@@ -11,15 +11,26 @@
    private final boolean meat;
    private final boolean alwaysEdible;
    private final boolean snack;
-   private final List<Pair<StatusEffectInstance, Float>> statusEffects;
+   private final List<Pair<java.util.function.Supplier<StatusEffectInstance>, Float>> statusEffects;
 
+   private FoodComponent(FoodComponent.Builder builder) {
+      this.hunger = builder.hunger;
+      this.saturationModifier = builder.saturationModifier;
+      this.meat = builder.meat;
+      this.alwaysEdible = builder.alwaysEdible;
+      this.snack = builder.snack;
+      this.statusEffects = builder.statusEffects;
+   }
+
+   // Forge: Use builder method instead
+   @Deprecated
    private FoodComponent(int healing, float saturationIn, boolean isMeat, boolean alwaysEdible, boolean fastEdible, List<Pair<StatusEffectInstance, Float>> effectsIn) {
       this.hunger = healing;
       this.saturationModifier = saturationIn;
       this.meat = isMeat;
       this.alwaysEdible = alwaysEdible;
       this.snack = fastEdible;
-      this.statusEffects = effectsIn;
+      this.statusEffects = effectsIn.stream().map(pair -> Pair.<java.util.function.Supplier<StatusEffectInstance>, Float>of(pair::getFirst, pair.getSecond())).collect(java.util.stream.Collectors.toList());
    }
 
    public int getHunger() {
@@ -43,7 +54,7 @@
    }
 
    public List<Pair<StatusEffectInstance, Float>> getStatusEffects() {
-      return this.statusEffects;
+      return this.statusEffects.stream().map(pair -> Pair.of(pair.getFirst() != null ? pair.getFirst().get() : null, pair.getSecond())).collect(java.util.stream.Collectors.toList());
    }
 
    public static class Builder {
@@ -52,7 +63,7 @@
       private boolean meat;
       private boolean alwaysEdible;
       private boolean snack;
-      private final List<Pair<StatusEffectInstance, Float>> statusEffects = Lists.newArrayList();
+      private final List<Pair<java.util.function.Supplier<StatusEffectInstance>, Float>> statusEffects = Lists.newArrayList();
 
       public FoodComponent.Builder hunger(int hungerIn) {
          this.hunger = hungerIn;
@@ -79,13 +90,20 @@
          return this;
       }
 
+      public FoodComponent.Builder effect(java.util.function.Supplier<StatusEffectInstance> effectIn, float probability) {
+          this.statusEffects.add(Pair.of(effectIn, probability));
+          return this;
+       }
+
+      // Forge: Use supplier method instead
+      @Deprecated
       public FoodComponent.Builder statusEffect(StatusEffectInstance effectIn, float probability) {
-         this.statusEffects.add(Pair.of(effectIn, probability));
+         this.statusEffects.add(Pair.of(() -> effectIn, probability));
          return this;
       }
 
       public FoodComponent build() {
-         return new FoodComponent(this.hunger, this.saturationModifier, this.meat, this.alwaysEdible, this.snack, this.statusEffects);
+         return new FoodComponent(this);
       }
    }
 }
