--- a/net/minecraft/item/ItemGroup.java
+++ b/net/minecraft/item/ItemGroup.java
@@ -109,12 +109,15 @@
    private EnchantmentTarget[] enchantments = new EnchantmentTarget[0];
    private ItemStack icon;
 
+   public ItemGroup(String label) {
+       this(-1, label);
+   }
+
    public ItemGroup(int index, String label) {
-      this.index = index;
       this.id = label;
       this.translationKey = new TranslatableText("itemGroup." + label);
       this.icon = ItemStack.EMPTY;
-      GROUPS[index] = this;
+      this.index = addGroupSafe(index, this);
    }
 
    @Environment(EnvType.CLIENT)
@@ -180,11 +183,13 @@
 
    @Environment(EnvType.CLIENT)
    public int getColumn() {
+      if (index > 11) return ((index - 12) % 10) % 5;
       return this.index % 6;
    }
 
    @Environment(EnvType.CLIENT)
    public boolean isTopRow() {
+      if (index > 11) return ((index - 12) % 10) < 5;
       return this.index < 6;
    }
 
@@ -221,4 +226,58 @@
       }
 
    }
+
+   public int getTabPage() {
+      return index < 12 ? 0 : ((index - 12) / 10) + 1;
+   }
+
+   public boolean hasSearchBar() {
+      return index == SEARCH.index;
+   }
+
+   /**
+    * Gets the width of the search bar of the creative tab, use this if your
+    * creative tab name overflows together with a custom texture.
+    *
+    * @return The width of the search bar, 89 by default
+    */
+   public int getSearchbarWidth() {
+      return 89;
+   }
+
+   @Environment(EnvType.CLIENT)
+   public net.minecraft.util.Identifier getBackgroundImage() {
+      return new net.minecraft.util.Identifier("textures/gui/container/creative_inventory/tab_" + this.getTexture());
+   }
+
+   private static final net.minecraft.util.Identifier CREATIVE_INVENTORY_TABS = new net.minecraft.util.Identifier("textures/gui/container/creative_inventory/tabs.png");
+   @Environment(EnvType.CLIENT)
+   public net.minecraft.util.Identifier getTabsImage() {
+      return CREATIVE_INVENTORY_TABS;
+   }
+
+   public int getLabelColor() {
+      return 4210752;
+   }
+
+   public int getSlotColor() {
+      return -2130706433;
+   }
+
+   public static synchronized int getGroupCountSafe() {
+      return ItemGroup.GROUPS.length;
+   }
+
+   private static synchronized int addGroupSafe(int index, ItemGroup newGroup) {
+      if(index == -1) {
+         index = GROUPS.length;
+      }
+      if (index >= GROUPS.length) {
+         ItemGroup[] tmp = new ItemGroup[index + 1];
+         System.arraycopy(GROUPS, 0, tmp, 0, GROUPS.length);
+         GROUPS = tmp;
+      }
+      GROUPS[index] = newGroup;
+      return index;
+   }
 }
