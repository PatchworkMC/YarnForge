--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -222,7 +222,7 @@
 
    public static <S extends MinecraftServer> S startServer(Function<Thread, S> threadFunction) {
       AtomicReference<S> atomicreference = new AtomicReference<>();
-      Thread thread = new Thread(() -> {
+      Thread thread = new Thread(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER, () -> {
          atomicreference.get().runServer();
       }, "Server thread");
       thread.setUncaughtExceptionHandler((p_240779_0_, p_240779_1_) -> {
@@ -370,6 +370,7 @@
             worldborder.addListener(new WorldBorderListener.WorldBorderSyncer(serverworld1.getWorldBorder()));
             this.worlds.put(registrykey1, serverworld1);
          }
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Load(worlds.get(registrykey)));
       }
 
    }
@@ -381,6 +382,7 @@
       } else if (p_240786_3_) {
          p_240786_1_.setSpawnPos(BlockPos.ORIGIN.up(), 0.0F);
       } else {
+         if (net.minecraftforge.event.ForgeEventFactory.onCreateWorldSpawn(p_240786_0_, p_240786_1_)) return;
          BiomeSource biomeprovider = chunkgenerator.getBiomeSource();
          Random random = new Random(p_240786_0_.getSeed());
          BlockPos blockpos = biomeprovider.locateBiome(0, p_240786_0_.getSeaLevel(), 0, 256, (p_244265_0_) -> {
@@ -446,6 +448,7 @@
    }
 
    private void prepareStartRegion(WorldGenerationProgressListener p_213186_1_) {
+      net.minecraftforge.common.world.StructureSpawnManager.gatherEntitySpawns();
       ServerWorld serverworld = this.getOverworld();
       LOGGER.info("Preparing start region for dimension {}", (Object)serverworld.getRegistryKey().getValue());
       BlockPos blockpos = serverworld.getSpawnPos();
@@ -560,6 +563,7 @@
       for(ServerWorld serverworld1 : this.getWorlds()) {
          if (serverworld1 != null) {
             try {
+               net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Unload(serverworld1));
                serverworld1.close();
             } catch (IOException ioexception1) {
                LOGGER.error("Exception closing the level", (Throwable)ioexception1);
@@ -608,6 +612,7 @@
    protected void runServer() {
       try {
          if (this.setupServer()) {
+            net.minecraftforge.fml.server.ServerLifecycleHooks.handleServerStarted(this);
             this.timeReference = Util.getMeasuringTimeMs();
             this.metadata.setDescription(new LiteralText(this.motd));
             this.metadata.setVersion(new ServerMetadata.Version(SharedConstants.getGameVersion().getName(), SharedConstants.getGameVersion().getProtocolVersion()));
@@ -637,7 +642,10 @@
                this.endMonitor(longtickdetector);
                this.loading = true;
             }
+            net.minecraftforge.fml.server.ServerLifecycleHooks.handleServerStopping(this);
+            net.minecraftforge.fml.server.ServerLifecycleHooks.expectServerStopped(); // has to come before finalTick to avoid race conditions
          } else {
+            net.minecraftforge.fml.server.ServerLifecycleHooks.expectServerStopped(); // has to come before finalTick to avoid race conditions
             this.setCrashReport((CrashReport)null);
          }
       } catch (Throwable throwable1) {
@@ -656,6 +664,7 @@
             LOGGER.error("We were unable to save this crash report to disk.");
          }
 
+         net.minecraftforge.fml.server.ServerLifecycleHooks.expectServerStopped(); // has to come before finalTick to avoid race conditions
          this.setCrashReport(crashreport);
       } finally {
          try {
@@ -664,6 +673,7 @@
          } catch (Throwable throwable) {
             LOGGER.error("Exception stopping the server", throwable);
          } finally {
+            net.minecraftforge.fml.server.ServerLifecycleHooks.handleServerStopped(this);
             this.exit();
          }
 
@@ -765,6 +775,7 @@
 
    protected void tick(BooleanSupplier hasTimeLeft) {
       long i = Util.getMeasuringTimeNano();
+      net.minecraftforge.fml.hooks.BasicEventHooks.onPreServerTick();
       ++this.ticks;
       this.tickWorlds(hasTimeLeft);
       if (i - this.lastPlayerSampleUpdate >= 5000000000L) {
@@ -779,6 +790,7 @@
 
          Collections.shuffle(Arrays.asList(agameprofile));
          this.metadata.getPlayers().setSample(agameprofile);
+         this.metadata.invalidateJson();
       }
 
       if (this.ticks % 6000 == 0) {
@@ -806,6 +818,7 @@
       long i1 = Util.getMeasuringTimeNano();
       this.metricsData.pushSample(i1 - i);
       this.profiler.pop();
+      net.minecraftforge.fml.hooks.BasicEventHooks.onPostServerTick();
    }
 
    protected void tickWorlds(BooleanSupplier hasTimeLeft) {
@@ -813,7 +826,8 @@
       this.getCommandFunctionManager().tick();
       this.profiler.swap("levels");
 
-      for(ServerWorld serverworld : this.getWorlds()) {
+      for(ServerWorld serverworld : this.getWorldArray()) {
+         long tickStart = Util.getMeasuringTimeNano();
          this.profiler.push(() -> {
             return serverworld + " " + serverworld.getRegistryKey().getValue();
          });
@@ -824,6 +838,7 @@
          }
 
          this.profiler.push("tick");
+         net.minecraftforge.fml.hooks.BasicEventHooks.onPreWorldTick(serverworld);
 
          try {
             serverworld.tick(hasTimeLeft);
@@ -832,9 +847,11 @@
             serverworld.addDetailsToCrashReport(crashreport);
             throw new CrashException(crashreport);
          }
+         net.minecraftforge.fml.hooks.BasicEventHooks.onPostWorldTick(serverworld);
 
          this.profiler.pop();
          this.profiler.pop();
+         perWorldTickTimes.computeIfAbsent(serverworld.getRegistryKey(), k -> new long[100])[this.ticks % 100] = Util.getMeasuringTimeNano() - tickStart;
       }
 
       this.profiler.swap("connection");
@@ -909,7 +926,7 @@
    }
 
    public String getServerModName() {
-      return "vanilla";
+      return net.minecraftforge.fml.BrandingControl.getServerBranding();
    }
 
    public CrashReport populateCrashReport(CrashReport report) {
@@ -922,6 +939,7 @@
       report.getSystemDetailsSection().add("Data Packs", () -> {
          StringBuilder stringbuilder = new StringBuilder();
 
+               LogManager.shutdown(); // we're manually managing the logging shutdown on the server. Make sure we do it here at the end.
          for(ResourcePackProfile resourcepackinfo : this.dataPackManager.getEnabledProfiles()) {
             if (stringbuilder.length() > 0) {
                stringbuilder.append(", ");
@@ -1274,6 +1292,7 @@
          this.getPlayerManager().onDataPacksReloaded();
          this.commandFunctionManager.method_29461(this.serverResourceManager.getFunctionLoader());
          this.structureManager.method_29300(this.serverResourceManager.getResourceManager());
+         this.getPlayerManager().getPlayerList().forEach(this.getPlayerManager()::sendCommandTree); //Forge: Fix newly added/modified commands not being sent to the client when commands reload.
       }, this);
       if (this.isOnThread()) {
          this.runTasks(completablefuture::isDone);
@@ -1283,10 +1302,13 @@
    }
 
    public static DataPackSettings loadDataPacks(ResourcePackManager p_240772_0_, DataPackSettings p_240772_1_, boolean p_240772_2_) {
+      net.minecraftforge.fml.packs.ResourcePackLoader.loadResourcePacks(p_240772_0_, net.minecraftforge.fml.server.ServerLifecycleHooks::buildPackFinder);
       p_240772_0_.scanPacks();
+      DataPackSettings.SAFE_MODE.addModPacks(net.minecraftforge.common.ForgeHooks.getModPacks());
+      p_240772_1_.addModPacks(net.minecraftforge.common.ForgeHooks.getModPacks());
       if (p_240772_2_) {
-         p_240772_0_.setEnabledProfiles(Collections.singleton("vanilla"));
-         return new DataPackSettings(ImmutableList.of("vanilla"), ImmutableList.of());
+         p_240772_0_.setEnabledProfiles(net.minecraftforge.common.ForgeHooks.getModPacksWithVanilla());
+         return new DataPackSettings(net.minecraftforge.common.ForgeHooks.getModPacksWithVanilla(), ImmutableList.of());
       } else {
          Set<String> set = Sets.newLinkedHashSet();
 
@@ -1436,6 +1458,31 @@
 
    public abstract boolean isHost(GameProfile profileIn);
 
+   private Map<RegistryKey<World>, long[]> perWorldTickTimes = Maps.newIdentityHashMap();
+   @Nullable
+   public long[] getTickTime(RegistryKey<World> dim) {
+      return perWorldTickTimes.get(dim);
+   }
+
+   @Deprecated //Forge Internal use Only, You can screw up a lot of things if you mess with this map.
+   public synchronized Map<RegistryKey<World>, ServerWorld> forgeGetWorldMap() {
+      return this.worlds;
+   }
+   private int worldArrayMarker = 0;
+   private int worldArrayLast = -1;
+   private ServerWorld[] worldArray;
+   @Deprecated //Forge Internal use Only, use to protect against concurrent modifications in the world tick loop.
+   public synchronized void markWorldsDirty() {
+      worldArrayMarker++;
+   }
+   private ServerWorld[] getWorldArray() {
+      if (worldArrayMarker == worldArrayLast && worldArray != null)
+         return worldArray;
+      worldArray = this.worlds.values().stream().toArray(x -> new ServerWorld[x]);
+      worldArrayLast = worldArrayMarker;
+      return worldArray;
+   }
+
    public void dump(Path p_223711_1_) throws IOException {
       Path path = p_223711_1_.resolve("levels");
 
@@ -1564,6 +1611,10 @@
       return this.saveProperties;
    }
 
+   public ServerResourceManager getDataPackRegistries() {
+       return serverResourceManager;
+   }
+
    public DynamicRegistryManager getRegistryManager() {
       return this.registryManager;
    }
