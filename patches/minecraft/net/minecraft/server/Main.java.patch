--- a/net/minecraft/server/Main.java
+++ b/net/minecraft/server/Main.java
@@ -72,6 +72,8 @@
       OptionSpec<Integer> optionspec11 = optionparser.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(-1);
       OptionSpec<String> optionspec12 = optionparser.accepts("serverId").withRequiredArg();
       OptionSpec<String> optionspec13 = optionparser.nonOptions();
+      optionparser.accepts("allowUpdates").withRequiredArg().ofType(Boolean.class).defaultsTo(Boolean.TRUE); // Forge: allow mod updates to proceed
+      optionparser.accepts("gameDir").withRequiredArg().ofType(File.class).defaultsTo(new File(".")); //Forge: Consume this argument, we use it in the launcher, and the client side.
 
       try {
          OptionSet optionset = optionparser.parse(p_main_0_);
@@ -79,33 +81,38 @@
             optionparser.printHelpOn(System.err);
             return;
          }
+         Path path1 = Paths.get("eula.txt");
+         EulaReader servereula = new EulaReader(path1);
 
+         if (!servereula.isEulaAgreedTo()) {
+            LOGGER.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
+            return;
+         }
+
          CrashReport.initCrashReport();
          Bootstrap.initialize();
          Bootstrap.logMissing();
          Util.startTimerHack();
+         if (!optionset.has(optionspec1)) net.minecraftforge.fml.server.ServerModLoader.load(); // Load mods before we load almost anything else anymore. Single spot now. Only loads if they haven't passed the initserver param
          DynamicRegistryManager.Impl dynamicregistries$impl = DynamicRegistryManager.create();
          Path path = Paths.get("server.properties");
          ServerPropertiesLoader serverpropertiesprovider = new ServerPropertiesLoader(dynamicregistries$impl, path);
          serverpropertiesprovider.store();
-         Path path1 = Paths.get("eula.txt");
-         EulaReader servereula = new EulaReader(path1);
          if (optionset.has(optionspec1)) {
             LOGGER.info("Initialized '{}' and '{}'", path.toAbsolutePath(), path1.toAbsolutePath());
             return;
          }
 
-         if (!servereula.isEulaAgreedTo()) {
-            LOGGER.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
-            return;
-         }
-
          File file1 = new File(optionset.valueOf(optionspec9));
          YggdrasilAuthenticationService yggdrasilauthenticationservice = new YggdrasilAuthenticationService(Proxy.NO_PROXY);
          MinecraftSessionService minecraftsessionservice = yggdrasilauthenticationservice.createMinecraftSessionService();
          GameProfileRepository gameprofilerepository = yggdrasilauthenticationservice.createProfileRepository();
          UserCache playerprofilecache = new UserCache(gameprofilerepository, new File(file1, MinecraftServer.USER_CACHE_FILE.getName()));
          String s = Optional.ofNullable(optionset.valueOf(optionspec10)).orElse(serverpropertiesprovider.getPropertiesHandler().levelName);
+         if (s == null || s.isEmpty() || new File(file1, s).getAbsolutePath().equals(new File(s).getAbsolutePath())) {
+            LOGGER.error("Invalid world directory specified, must not be null, empty or the same directory as your universe! " + s);
+            return;
+         }
          LevelStorage saveformat = LevelStorage.create(file1.toPath());
          LevelStorage.Session saveformat$levelsave = saveformat.createSession(s);
          MinecraftServer.convertLevel(saveformat$levelsave);
@@ -143,6 +150,8 @@
                dimensiongeneratorsettings = optionset.has(optionspec3) ? serverproperties.generatorOptions.withBonusChest() : serverproperties.generatorOptions;
             }
 
+            // Forge: Deserialize the DimensionGeneratorSettings to ensure modded dims are loaded on first server load (see SimpleRegistryCodec#decode). Vanilla behaviour only loads from the server.properties and deserializes only after the 2nd server load.
+            dimensiongeneratorsettings = GeneratorOptions.CODEC.encodeStart(net.minecraft.util.dynamic.RegistryReadingOps.of(NbtOps.INSTANCE, dynamicregistries$impl), dimensiongeneratorsettings).flatMap(nbt -> GeneratorOptions.CODEC.parse(worldsettingsimport, nbt)).getOrThrow(false, errorMsg->{});
             iserverconfiguration = new LevelProperties(worldsettings, dimensiongeneratorsettings, Lifecycle.stable());
          }
 
@@ -170,6 +179,7 @@
          Thread thread = new Thread("Server Shutdown Thread") {
             public void run() {
                dedicatedserver.stop(true);
+               LogManager.shutdown(); // we're manually managing the logging shutdown on the server. Make sure we do it here at the end.
             }
          };
          thread.setUncaughtExceptionHandler(new UncaughtExceptionLogger(LOGGER));
