--- a/net/minecraft/recipe/CookingRecipeSerializer.java
+++ b/net/minecraft/recipe/CookingRecipeSerializer.java
@@ -8,7 +8,7 @@
 import net.minecraft.util.JsonHelper;
 import net.minecraft.util.registry.Registry;
 
-public class CookingRecipeSerializer<T extends AbstractCookingRecipe> implements RecipeSerializer<T> {
+public class CookingRecipeSerializer<T extends AbstractCookingRecipe> extends net.minecraftforge.registries.ForgeRegistryEntry<RecipeSerializer<?>> implements RecipeSerializer<T> {
    private final int cookingTime;
    private final CookingRecipeSerializer.RecipeFactory<T> recipeFactory;
 
@@ -21,11 +21,17 @@
       String s = JsonHelper.getString(json, "group", "");
       JsonElement jsonelement = (JsonElement)(JsonHelper.hasArray(json, "ingredient") ? JsonHelper.getArray(json, "ingredient") : JsonHelper.getObject(json, "ingredient"));
       Ingredient ingredient = Ingredient.fromJson(jsonelement);
+      //Forge: Check if primitive string to keep vanilla or a object which can contain a count field.
+      if (!json.has("result")) throw new com.google.gson.JsonSyntaxException("Missing result, expected to find a string or object");
+      ItemStack itemstack;
+      if (json.get("result").isJsonObject()) itemstack = ShapedRecipe.getItemStack(JsonHelper.getObject(json, "result"));
+      else {
       String s1 = JsonHelper.getString(json, "result");
       Identifier resourcelocation = new Identifier(s1);
-      ItemStack itemstack = new ItemStack(Registry.ITEM.getOrEmpty(resourcelocation).orElseThrow(() -> {
+      itemstack = new ItemStack(Registry.ITEM.getOrEmpty(resourcelocation).orElseThrow(() -> {
          return new IllegalStateException("Item: " + s1 + " does not exist");
       }));
+      }
       float f = JsonHelper.getFloat(json, "experience", 0.0F);
       int i = JsonHelper.getInt(json, "cookingtime", this.cookingTime);
       return this.recipeFactory.create(recipeId, s, ingredient, itemstack, f, i);
