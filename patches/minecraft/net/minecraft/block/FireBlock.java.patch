--- a/net/minecraft/block/FireBlock.java
+++ b/net/minecraft/block/FireBlock.java
@@ -91,13 +91,13 @@
    protected BlockState getStateForPosition(BlockView blockReader, BlockPos pos) {
       BlockPos blockpos = pos.down();
       BlockState blockstate = blockReader.getBlockState(blockpos);
-      if (!this.isFlammable(blockstate) && !blockstate.isSideSolidFullSquare(blockReader, blockpos, Direction.UP)) {
+      if (!this.canCatchFire(blockReader, pos, Direction.UP) && !blockstate.isSideSolidFullSquare(blockReader, blockpos, Direction.UP)) {
          BlockState blockstate1 = this.getDefaultState();
 
          for(Direction direction : Direction.values()) {
             BooleanProperty booleanproperty = DIRECTION_PROPERTIES.get(direction);
             if (booleanproperty != null) {
-               blockstate1 = blockstate1.with(booleanproperty, Boolean.valueOf(this.isFlammable(blockReader.getBlockState(pos.offset(direction)))));
+               blockstate1 = blockstate1.with(booleanproperty, Boolean.valueOf(this.canCatchFire(blockReader, pos.offset(direction), direction.getOpposite())));
             }
          }
 
@@ -120,7 +120,7 @@
          }
 
          BlockState blockstate = worldIn.getBlockState(pos.down());
-         boolean flag = blockstate.isIn(worldIn.getDimension().getInfiniburnBlocks());
+         boolean flag = blockstate.isFireSource(worldIn, pos, Direction.UP);
          int i = state.get(AGE);
          if (!flag && worldIn.isRaining() && this.isRainingAround(worldIn, pos) && rand.nextFloat() < 0.2F + (float)i * 0.03F) {
             worldIn.removeBlock(pos, false);
@@ -141,7 +141,7 @@
                   return;
                }
 
-               if (i == 15 && rand.nextInt(4) == 0 && !this.isFlammable(worldIn.getBlockState(pos.down()))) {
+               if (i == 15 && rand.nextInt(4) == 0 && !this.canCatchFire(worldIn, pos.down(), Direction.UP)) {
                   worldIn.removeBlock(pos, false);
                   return;
                }
@@ -149,12 +149,12 @@
 
             boolean flag1 = worldIn.hasHighHumidity(pos);
             int k = flag1 ? -50 : 0;
-            this.trySpreadingFire(worldIn, pos.east(), 300 + k, rand, i);
-            this.trySpreadingFire(worldIn, pos.west(), 300 + k, rand, i);
-            this.trySpreadingFire(worldIn, pos.down(), 250 + k, rand, i);
-            this.trySpreadingFire(worldIn, pos.up(), 250 + k, rand, i);
-            this.trySpreadingFire(worldIn, pos.north(), 300 + k, rand, i);
-            this.trySpreadingFire(worldIn, pos.south(), 300 + k, rand, i);
+            this.tryCatchFire(worldIn, pos.east(), 300 + k, rand, i, Direction.WEST);
+            this.tryCatchFire(worldIn, pos.west(), 300 + k, rand, i, Direction.EAST);
+            this.tryCatchFire(worldIn, pos.down(), 250 + k, rand, i, Direction.UP);
+            this.tryCatchFire(worldIn, pos.up(), 250 + k, rand, i, Direction.DOWN);
+            this.tryCatchFire(worldIn, pos.north(), 300 + k, rand, i, Direction.SOUTH);
+            this.tryCatchFire(worldIn, pos.south(), 300 + k, rand, i, Direction.NORTH);
             BlockPos.Mutable blockpos$mutable = new BlockPos.Mutable();
 
             for(int l = -1; l <= 1; ++l) {
@@ -192,16 +192,18 @@
       return worldIn.hasRain(pos) || worldIn.hasRain(pos.west()) || worldIn.hasRain(pos.east()) || worldIn.hasRain(pos.north()) || worldIn.hasRain(pos.south());
    }
 
+   @Deprecated //Forge: Use IForgeBlockState.getFlammability, Public for default implementation only.
    public int getSpreadChance(BlockState state) {
       return state.contains(Properties.WATERLOGGED) && state.get(Properties.WATERLOGGED) ? 0 : this.spreadChances.getInt(state.getBlock());
    }
 
+   @Deprecated //Forge: Use IForgeBlockState.getFireSpreadSpeed
    public int getBurnChance(BlockState state) {
       return state.contains(Properties.WATERLOGGED) && state.get(Properties.WATERLOGGED) ? 0 : this.burnChances.getInt(state.getBlock());
    }
 
-   private void trySpreadingFire(World worldIn, BlockPos pos, int chance, Random random, int age) {
-      int i = this.getSpreadChance(worldIn.getBlockState(pos));
+   private void tryCatchFire(World worldIn, BlockPos pos, int chance, Random random, int age, Direction face) {
+      int i = worldIn.getBlockState(pos).getFlammability(worldIn, pos, face);
       if (random.nextInt(chance) < i) {
          BlockState blockstate = worldIn.getBlockState(pos);
          if (random.nextInt(age + 10) < 5 && !worldIn.hasRain(pos)) {
@@ -211,11 +213,7 @@
             worldIn.removeBlock(pos, false);
          }
 
-         Block block = blockstate.getBlock();
-         if (block instanceof TntBlock) {
-            TntBlock tntblock = (TntBlock)block;
-            TntBlock.primeTnt(worldIn, pos);
-         }
+         blockstate.catchFire(worldIn, pos, face, null);
       }
 
    }
@@ -227,7 +225,7 @@
 
    private boolean areBlocksAroundFlammable(BlockView worldIn, BlockPos pos) {
       for(Direction direction : Direction.values()) {
-         if (this.isFlammable(worldIn.getBlockState(pos.offset(direction)))) {
+         if (this.canCatchFire(worldIn, pos.offset(direction), direction.getOpposite())) {
             return true;
          }
       }
@@ -243,13 +241,14 @@
 
          for(Direction direction : Direction.values()) {
             BlockState blockstate = worldIn.getBlockState(pos.offset(direction));
-            i = Math.max(this.getBurnChance(blockstate), i);
+            i = Math.max(blockstate.getFireSpreadSpeed(worldIn, pos.offset(direction), direction.getOpposite()), i);
          }
 
          return i;
       }
    }
 
+   @Deprecated //Forge: Use canCatchFire with more context
    protected boolean isFlammable(BlockState state) {
       return this.getBurnChance(state) > 0;
    }
@@ -268,10 +267,23 @@
    }
 
    private void registerFlammableBlock(Block blockIn, int encouragement, int flammability) {
+      if (blockIn == Blocks.AIR) throw new IllegalArgumentException("Tried to set air on fire... This is bad.");
       this.burnChances.put(blockIn, encouragement);
       this.spreadChances.put(blockIn, flammability);
    }
 
+   /**
+    * Side sensitive version that calls the block function.
+    *
+    * @param world The current world
+    * @param pos Block position
+    * @param face The side the fire is coming from
+    * @return True if the face can catch fire.
+    */
+   public boolean canCatchFire(BlockView world, BlockPos pos, Direction face) {
+      return world.getBlockState(pos).isFlammable(world, pos, face);
+   }
+
    public static void registerDefaultFlammables() {
       FireBlock fireblock = (FireBlock)Blocks.FIRE;
       fireblock.registerFlammableBlock(Blocks.OAK_PLANKS, 5, 20);
