--- a/net/minecraft/block/PoweredRailBlock.java
+++ b/net/minecraft/block/PoweredRailBlock.java
@@ -14,10 +14,16 @@
 public class PoweredRailBlock extends AbstractRailBlock {
    public static final EnumProperty<RailShape> SHAPE = Properties.STRAIGHT_RAIL_SHAPE;
    public static final BooleanProperty POWERED = Properties.POWERED;
+   private final boolean isActivator;  // TRUE for an Activator Rail, FALSE for Powered Rail
 
    public PoweredRailBlock(AbstractBlock.Settings builder) {
+      this(builder, false);
+   }
+
+   protected PoweredRailBlock(AbstractBlock.Settings builder, boolean isPoweredRail) {
       super(true, builder);
       this.setDefaultState(this.stateManager.getDefaultState().with(SHAPE, RailShape.NORTH_SOUTH).with(POWERED, Boolean.valueOf(false)));
+      this.isActivator = !isPoweredRail;
    }
 
    protected boolean isPoweredByOtherRails(World worldIn, BlockPos pos, BlockState state, boolean searchForward, int recursionCount) {
@@ -99,13 +105,13 @@
 
    protected boolean isPoweredByOtherRails(World world, BlockPos state, boolean searchForward, int recursionCount, RailShape shape) {
       BlockState blockstate = world.getBlockState(state);
-      if (!blockstate.isOf(this)) {
+      if (!(blockstate.getBlock() instanceof PoweredRailBlock)) {
          return false;
       } else {
-         RailShape railshape = blockstate.get(SHAPE);
+         RailShape railshape = getRailDirection(blockstate, world, state, null);
          if (shape != RailShape.EAST_WEST || railshape != RailShape.NORTH_SOUTH && railshape != RailShape.ASCENDING_NORTH && railshape != RailShape.ASCENDING_SOUTH) {
             if (shape != RailShape.NORTH_SOUTH || railshape != RailShape.EAST_WEST && railshape != RailShape.ASCENDING_EAST && railshape != RailShape.ASCENDING_WEST) {
-               if (blockstate.get(POWERED)) {
+               if (isActivator == (((PoweredRailBlock) blockstate.getBlock()).isActivator)) {
                   return world.isReceivingRedstonePower(state) ? true : this.isPoweredByOtherRails(world, state, blockstate, searchForward, recursionCount + 1);
                } else {
                   return false;
@@ -156,6 +162,9 @@
             return state.with(SHAPE, RailShape.SOUTH_EAST);
          case NORTH_EAST:
             return state.with(SHAPE, RailShape.SOUTH_WEST);
+         case NORTH_SOUTH: //Forge fix: MC-196102
+         case EAST_WEST:
+            return state;
          }
       case COUNTERCLOCKWISE_90:
          switch((RailShape)state.get(SHAPE)) {
@@ -255,4 +264,8 @@
    protected void appendProperties(StateManager.Builder<Block, BlockState> builder) {
       builder.add(SHAPE, POWERED);
    }
+
+   public boolean isActivatorRail() {
+      return isActivator;
+   }
 }
