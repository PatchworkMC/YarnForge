--- a/net/minecraft/block/Block.java
+++ b/net/minecraft/block/Block.java
@@ -56,9 +56,10 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class Block extends AbstractBlock implements ItemConvertible {
+public class Block extends AbstractBlock implements ItemConvertible, net.minecraftforge.common.extensions.IForgeBlock {
    protected static final Logger LOGGER = LogManager.getLogger();
-   public static final IdList<BlockState> STATE_IDS = new IdList<>();
+   @Deprecated //Forge: Do not use, use GameRegistry
+   public static final IdList<BlockState> STATE_IDS = net.minecraftforge.registries.GameData.getBlockStateIDMap();
    private static final LoadingCache<VoxelShape, Boolean> FULL_CUBE_SHAPE_CACHE = CacheBuilder.newBuilder().maximumSize(512L).weakKeys().build(new CacheLoader<VoxelShape, Boolean>() {
       public Boolean load(VoxelShape p_load_1_) {
          return !VoxelShapes.matchesAnywhere(VoxelShapes.fullCube(), p_load_1_, BooleanBiFunction.NOT_SAME);
@@ -153,6 +154,8 @@
       super(properties);
       StateManager.Builder<Block, BlockState> builder = new StateManager.Builder<>(this);
       this.appendProperties(builder);
+      this.harvestLevel = properties.getHarvestLevel();
+      this.harvestTool = properties.getHarvestTool();
       this.stateManager = builder.build(Block::getDefaultState, BlockState::new);
       this.setDefaultState(this.stateManager.getDefaultState());
    }
@@ -263,7 +266,7 @@
    }
 
    public static void dropStack(World worldIn, BlockPos pos, ItemStack stack) {
-      if (!worldIn.isClient && !stack.isEmpty() && worldIn.getGameRules().getBoolean(GameRules.DO_TILE_DROPS)) {
+      if (!worldIn.isClient && !stack.isEmpty() && worldIn.getGameRules().getBoolean(GameRules.DO_TILE_DROPS) && !worldIn.restoringBlockSnapshots) {
          float f = 0.5F;
          double d0 = (double)(worldIn.random.nextFloat() * 0.5F) + 0.25D;
          double d1 = (double)(worldIn.random.nextFloat() * 0.5F) + 0.25D;
@@ -275,7 +278,7 @@
    }
 
    public void dropExperience(ServerWorld worldIn, BlockPos pos, int amount) {
-      if (worldIn.getGameRules().getBoolean(GameRules.DO_TILE_DROPS)) {
+      if (worldIn.getGameRules().getBoolean(GameRules.DO_TILE_DROPS) && !worldIn.restoringBlockSnapshots) {
          while(amount > 0) {
             int i = ExperienceOrbEntity.roundToOrbSize(amount);
             amount -= i;
@@ -285,6 +288,7 @@
 
    }
 
+   @Deprecated //Forge: Use more sensitive version
    public float getBlastResistance() {
       return this.resistance;
    }
@@ -334,6 +338,7 @@
       entityIn.setVelocity(entityIn.getVelocity().multiply(1.0D, 0.0D, 1.0D));
    }
 
+   @Deprecated //Forge: Use more sensitive version
    public ItemStack getPickStack(BlockView worldIn, BlockPos pos, BlockState state) {
       return new ItemStack(this);
    }
@@ -365,6 +370,7 @@
    public void rainTick(World worldIn, BlockPos pos) {
    }
 
+   @Deprecated //Forge: Use more sensitive version
    public boolean shouldDropItemsOnExplosion(Explosion explosionIn) {
       return true;
    }
@@ -384,6 +390,7 @@
       return this.defaultState;
    }
 
+   @Deprecated //Forge: Use more sensitive version {@link IForgeBlockState#getSoundType(IWorldReader, BlockPos, Entity) }
    public BlockSoundGroup getSoundGroup(BlockState state) {
       return this.soundGroup;
    }
@@ -393,7 +400,7 @@
          this.cachedItem = Item.fromBlock(this);
       }
 
-      return this.cachedItem;
+      return this.cachedItem.delegate.get(); //Forge: Vanilla caches the items, update with registry replacements.
    }
 
    public boolean hasDynamicBounds() {
@@ -401,7 +408,7 @@
    }
 
    public String toString() {
-      return "Block{" + Registry.BLOCK.getId(this) + "}";
+      return "Block{" + getRegistryName() + "}";
    }
 
    @Environment(EnvType.CLIENT)
@@ -412,6 +419,83 @@
       return this;
    }
 
+   /* ======================================== FORGE START =====================================*/
+   protected Random RANDOM = new Random();
+   private net.minecraftforge.common.ToolType harvestTool;
+   private int harvestLevel;
+   private final net.minecraftforge.common.util.ReverseTagWrapper<Block> reverseTags = new net.minecraftforge.common.util.ReverseTagWrapper<>(this, BlockTags::getTagGroup);
+
+   @Override
+   public float getSlipperiness(BlockState state, WorldView world, BlockPos pos, @Nullable Entity entity) {
+      return this.slipperiness;
+   }
+
+   @Nullable
+   @Override
+   public net.minecraftforge.common.ToolType getHarvestTool(BlockState state) {
+      return harvestTool; //TODO: RE-Evaluate
+   }
+
+   @Override
+   public int getHarvestLevel(BlockState state) {
+     return harvestLevel; //TODO: RE-Evaluate
+   }
+
+   @Override
+   public boolean canSustainPlant(BlockState state, BlockView world, BlockPos pos, Direction facing, net.minecraftforge.common.IPlantable plantable) {
+      BlockState plant = plantable.getPlant(world, pos.offset(facing));
+      net.minecraftforge.common.PlantType type = plantable.getPlantType(world, pos.offset(facing));
+
+      if (plant.getBlock() == Blocks.CACTUS)
+         return state.isOf(Blocks.CACTUS) || state.isOf(Blocks.SAND) || state.isOf(Blocks.RED_SAND);
+
+      if (plant.getBlock() == Blocks.SUGAR_CANE && this == Blocks.SUGAR_CANE)
+         return true;
+
+      if (plantable instanceof PlantBlock && ((PlantBlock)plantable).canPlantOnTop(state, world, pos))
+         return true;
+
+      if (net.minecraftforge.common.PlantType.DESERT.equals(type)) {
+         return this.getBlock() == Blocks.SAND || this.getBlock() == Blocks.TERRACOTTA || this.getBlock() instanceof GlazedTerracottaBlock;
+      } else if (net.minecraftforge.common.PlantType.NETHER.equals(type)) {
+         return this.getBlock() == Blocks.SOUL_SAND;
+      } else if (net.minecraftforge.common.PlantType.CROP.equals(type)) {
+         return state.isOf(Blocks.FARMLAND);
+      } else if (net.minecraftforge.common.PlantType.CAVE.equals(type)) {
+         return state.isSideSolidFullSquare(world, pos, Direction.UP);
+      } else if (net.minecraftforge.common.PlantType.PLAINS.equals(type)) {
+         return this.getBlock() == Blocks.GRASS_BLOCK || net.minecraftforge.common.Tags.Blocks.DIRT.contains(this) || this.getBlock() == Blocks.FARMLAND;
+      } else if (net.minecraftforge.common.PlantType.WATER.equals(type)) {
+         return state.getMaterial() == net.minecraft.block.Material.WATER; //&& state.getValue(BlockLiquidWrapper)
+      } else if (net.minecraftforge.common.PlantType.BEACH.equals(type)) {
+         boolean isBeach = state.isOf(Blocks.GRASS_BLOCK) || net.minecraftforge.common.Tags.Blocks.DIRT.contains(this) || state.isOf(Blocks.SAND) || state.isOf(Blocks.RED_SAND);
+         boolean hasWater = false;
+         for (Direction face : Direction.Type.HORIZONTAL) {
+             BlockState blockState = world.getBlockState(pos.offset(face));
+             net.minecraft.fluid.FluidState fluidState = world.getFluidState(pos.offset(face));
+             hasWater |= blockState.isOf(Blocks.FROSTED_ICE);
+             hasWater |= fluidState.isIn(net.minecraft.tag.FluidTags.WATER);
+             if (hasWater)
+                break; //No point continuing.
+         }
+         return isBeach && hasWater;
+      }
+      return false;
+  }
+
+  @Override
+  public final java.util.Set<net.minecraft.util.Identifier> getTags() {
+     return reverseTags.getTagNames();
+  }
+
+  static {
+      net.minecraftforge.common.ForgeHooks.setBlockToolSetter((block, tool, level) -> {
+            block.harvestTool = tool;
+            block.harvestLevel = level;
+      });
+  }
+   /* ========================================= FORGE END ======================================*/
+
    public static final class NeighborGroup {
       private final BlockState self;
       private final BlockState other;
