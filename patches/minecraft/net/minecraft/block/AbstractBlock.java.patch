--- a/net/minecraft/block/AbstractBlock.java
+++ b/net/minecraft/block/AbstractBlock.java
@@ -59,7 +59,8 @@
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
 
-public abstract class AbstractBlock {
+//TODO, Delegates are weird here now, because Block extends this.
+public abstract class AbstractBlock extends net.minecraftforge.registries.ForgeRegistryEntry<Block> {
    protected static final Direction[] FACINGS = new Direction[]{Direction.WEST, Direction.EAST, Direction.NORTH, Direction.SOUTH, Direction.DOWN, Direction.UP};
    protected final Material material;
    protected final boolean collidable;
@@ -86,6 +87,8 @@
       this.jumpVelocityMultiplier = properties.jumpVelocityMultiplier;
       this.dynamicBounds = properties.dynamicBounds;
       this.settings = properties;
+      final Identifier lootTableCache = properties.lootTableId;
+      this.lootTableSupplier = lootTableCache != null ? () -> lootTableCache : properties.lootTableSupplier != null ? properties.lootTableSupplier : () -> new Identifier(this.getRegistryName().getNamespace(), "blocks/" + this.getRegistryName().getPath());
    }
 
    @Deprecated
@@ -128,7 +131,7 @@
 
    @Deprecated
    public void onStateReplaced(BlockState state, World worldIn, BlockPos pos, BlockState newState, boolean isMoving) {
-      if (this.hasBlockEntity() && !state.isOf(newState.getBlock())) {
+      if (state.hasTileEntity() && (!state.isOf(newState.getBlock()) || !newState.hasTileEntity())) {
          worldIn.removeBlockEntity(pos);
       }
 
@@ -190,7 +193,7 @@
 
    @Deprecated
    public boolean canReplace(BlockState state, ItemPlacementContext useContext) {
-      return this.material.isReplaceable() && (useContext.getStack().isEmpty() || useContext.getStack().getItem() != this.asItem());
+      return state.getMaterial().isReplaceable() && (useContext.getStack().isEmpty() || useContext.getStack().getItem() != this.asItem());
    }
 
    @Deprecated
@@ -293,8 +296,8 @@
       if (f == -1.0F) {
          return 0.0F;
       } else {
-         int i = player.isUsingEffectiveTool(state) ? 30 : 100;
-         return player.getBlockBreakingSpeed(state) / f / (float)i;
+         int i = net.minecraftforge.common.ForgeHooks.canHarvestBlock(state, player, worldIn, pos) ? 30 : 100;
+         return player.getDigSpeed(state, pos) / f / (float)i;
       }
    }
 
@@ -320,14 +323,14 @@
       return 0;
    }
 
+   @Deprecated //Forge: Use state.hasTileEntity()
    public final boolean hasBlockEntity() {
       return this instanceof BlockEntityProvider;
    }
 
    public final Identifier getLootTableId() {
       if (this.lootTableId == null) {
-         Identifier resourcelocation = Registry.BLOCK.getId(this.asBlock());
-         this.lootTableId = new Identifier(resourcelocation.getNamespace(), "blocks/" + resourcelocation.getPath());
+         this.lootTableId = this.lootTableSupplier.get();
       }
 
       return this.lootTableId;
@@ -345,6 +348,14 @@
       return this.settings.materialColorFactory.apply(this.asBlock().getDefaultState());
    }
 
+   protected boolean isAir(BlockState state) {
+      return ((AbstractBlockState)state).isAir;
+   }
+
+   /* ======================================== FORGE START ===================================== */
+   private final java.util.function.Supplier<Identifier> lootTableSupplier;
+   /* ========================================= FORGE END ====================================== */
+
    public abstract static class AbstractBlockState extends State<Block, BlockState> {
       private final int luminance;
       private final boolean hasSidedTransparency;
@@ -427,14 +438,18 @@
          return this.luminance;
       }
 
+      /** @deprecated use {@link BlockState#isAir(IBlockReader, BlockPos) */
+      @Deprecated
       public boolean isAir() {
-         return this.isAir;
+         return this.getBlock().isAir((BlockState)this);
       }
 
       public MaterialColor getTopMaterialColor(BlockView worldIn, BlockPos pos) {
          return this.materialColor;
       }
 
+      /** @deprecated use {@link BlockState#rotate(IWorld, BlockPos, Rotation) */
+      @Deprecated
       public BlockState rotate(BlockRotation rot) {
          return this.getBlock().rotate(this.asBlockState(), rot);
       }
@@ -801,6 +816,9 @@
       private Identifier lootTableId;
       private boolean opaque = true;
       private boolean isAir;
+      private int harvestLevel = -1;
+      private net.minecraftforge.common.ToolType harvestTool;
+      private java.util.function.Supplier<Identifier> lootTableSupplier;
       private AbstractBlock.TypedContextPredicate<EntityType<?>> allowsSpawningPredicate = (p_235832_0_, p_235832_1_, p_235832_2_, p_235832_3_) -> {
          return p_235832_0_.isSideSolidFullSquare(p_235832_1_, p_235832_2_, Direction.UP) && p_235832_0_.getLuminance() < 14;
       };
@@ -862,6 +880,8 @@
          abstractblock$properties.opaque = blockIn.settings.opaque;
          abstractblock$properties.isAir = blockIn.settings.isAir;
          abstractblock$properties.toolRequired = blockIn.settings.toolRequired;
+         abstractblock$properties.harvestLevel = blockIn.settings.harvestLevel;
+         abstractblock$properties.harvestTool = blockIn.settings.harvestTool;
          return abstractblock$properties;
       }
 
@@ -876,6 +896,24 @@
          return this;
       }
 
+      public AbstractBlock.Settings harvestLevel(int harvestLevel) {
+         this.harvestLevel = harvestLevel;
+         return this;
+      }
+
+      public AbstractBlock.Settings harvestTool(net.minecraftforge.common.ToolType harvestTool) {
+         this.harvestTool = harvestTool;
+         return this;
+      }
+
+      public int getHarvestLevel() {
+         return this.harvestLevel;
+      }
+
+      public net.minecraftforge.common.ToolType getHarvestTool() {
+         return this.harvestTool;
+      }
+
       public AbstractBlock.Settings slipperiness(float slipperinessIn) {
          this.slipperiness = slipperinessIn;
          return this;
@@ -932,7 +970,7 @@
       }
 
       public AbstractBlock.Settings dropsLike(Block blockIn) {
-         this.lootTableId = blockIn.getLootTableId();
+         this.lootTableSupplier = () -> blockIn.delegate.get().getLootTableId();
          return this;
       }
 
