--- a/net/minecraft/data/server/AbstractTagProvider.java
+++ b/net/minecraft/data/server/AbstractTagProvider.java
@@ -31,10 +31,20 @@
    protected final DataGenerator root;
    protected final Registry<T> registry;
    protected final Map<Identifier, Tag.Builder> tagBuilders = Maps.newLinkedHashMap();
+   protected final String modId;
+   protected final net.minecraftforge.common.data.ExistingFileHelper existingFileHelper;
+   private final net.minecraftforge.common.data.ExistingFileHelper.IResourceType resourceType;
 
+   @Deprecated//Forge, Use ModID version.
    protected AbstractTagProvider(DataGenerator generatorIn, Registry<T> registryIn) {
+      this(generatorIn, registryIn, "vanilla", null);
+   }
+   protected AbstractTagProvider(DataGenerator generatorIn, Registry<T> registryIn, String modId, @javax.annotation.Nullable net.minecraftforge.common.data.ExistingFileHelper existingFileHelper) {
       this.root = generatorIn;
       this.registry = registryIn;
+      this.modId = modId;
+      this.existingFileHelper = existingFileHelper;
+      this.resourceType = new net.minecraftforge.common.data.ExistingFileHelper.ResourceType(net.minecraft.resource.ResourceType.SERVER_DATA, ".json", "tags/" + getTagFolder());
    }
 
    protected abstract void configure();
@@ -50,12 +60,14 @@
          return this.registry.getOrEmpty(p_240527_1_).orElse((T)null);
       };
       this.tagBuilders.forEach((p_240524_4_, p_240524_5_) -> {
-         List<Tag.TrackedEntry> list = p_240524_5_.streamUnresolvedEntries(function, function1).collect(Collectors.toList());
+         // FORGE: Add validation via existing resources
+         List<Tag.TrackedEntry> list = p_240524_5_.streamUnresolvedEntries(function, function1).filter(this::missing).collect(Collectors.toList());
          if (!list.isEmpty()) {
             throw new IllegalArgumentException(String.format("Couldn't define tag %s as it is missing following references: %s", p_240524_4_, list.stream().map(Objects::toString).collect(Collectors.joining(","))));
          } else {
             JsonObject jsonobject = p_240524_5_.toJson();
             Path path = this.getOutput(p_240524_4_);
+            if (path == null) return; //Forge: Allow running this data provider without writing it. Recipe provider needs valid tags.
 
             try {
                String s = GSON.toJson((JsonElement)jsonobject);
@@ -77,20 +89,36 @@
       });
    }
 
+   private boolean missing(Tag.TrackedEntry reference) {
+      Tag.Entry entry = reference.getEntry();
+      // We only care about non-optional tag entries, this is the only type that can reference a resource and needs validation
+      // Optional tags should not be validated
+      if (entry instanceof Tag.TagEntry) {
+         return existingFileHelper == null || !existingFileHelper.exists(((Tag.TagEntry)entry).getId(), resourceType);
+      }
+      return false;
+   }
+
+   @SuppressWarnings({ "unchecked", "rawtypes" })
+   protected String getTagFolder() {
+      return ((Registry)Registry.REGISTRIES).getId(registry).getPath() + "s";
+   }
+
    protected abstract Path getOutput(Identifier id);
 
    protected AbstractTagProvider.ObjectBuilder<T> getOrCreateTagBuilder(Tag.Identified<T> tag) {
       Tag.Builder itag$builder = this.method_27169(tag);
-      return new AbstractTagProvider.ObjectBuilder<>(itag$builder, this.registry, "vanilla");
+      return new AbstractTagProvider.ObjectBuilder<>(itag$builder, this.registry, modId);
    }
 
    protected Tag.Builder method_27169(Tag.Identified<T> tag) {
       return this.tagBuilders.computeIfAbsent(tag.getId(), (p_240526_0_) -> {
+         existingFileHelper.trackGenerated(p_240526_0_, resourceType);
          return new Tag.Builder();
       });
    }
 
-   public static class ObjectBuilder<T> {
+   public static class ObjectBuilder<T> implements net.minecraftforge.common.extensions.IForgeTagBuilder<T> {
       private final Tag.Builder field_23960;
       private final Registry<T> field_23961;
       private final String field_23962;
@@ -118,5 +146,18 @@
          });
          return this;
       }
+
+      public AbstractTagProvider.ObjectBuilder<T> add(Tag.Entry tag) {
+          field_23960.add(tag, field_23962);
+          return this;
+      }
+
+      public Tag.Builder getInternalBuilder() {
+          return field_23960;
+      }
+
+      public String getModID() {
+          return field_23962;
+      }
    }
 }
