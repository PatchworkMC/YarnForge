--- a/net/minecraft/data/server/LootTablesProvider.java
+++ b/net/minecraft/data/server/LootTablesProvider.java
@@ -40,7 +40,7 @@
    public void run(DataCache cache) {
       Path path = this.root.getOutput();
       Map<Identifier, LootTable> map = Maps.newHashMap();
-      this.lootTypeGenerators.forEach((p_218438_1_) -> {
+      this.getTables().forEach((p_218438_1_) -> {
          p_218438_1_.getFirst().get().accept((p_218437_2_, p_218437_3_) -> {
             if (map.put(p_218437_2_, p_218437_3_.type(p_218438_1_.getSecond()).build()) != null) {
                throw new IllegalStateException("Duplicate loot table " + p_218437_2_);
@@ -51,13 +51,8 @@
          return null;
       }, map::get);
 
-      for(Identifier resourcelocation : Sets.difference(LootTables.getAll(), map.keySet())) {
-         validationtracker.report("Missing built-in table: " + resourcelocation);
-      }
+      validate(map, validationtracker);
 
-      map.forEach((p_229439_1_, p_229439_2_) -> {
-         LootManager.validate(validationtracker, p_229439_1_, p_229439_2_);
-      });
       Multimap<String, String> multimap = validationtracker.getMessages();
       if (!multimap.isEmpty()) {
          multimap.forEach((p_229440_0_, p_229440_1_) -> {
@@ -78,6 +73,20 @@
       }
    }
 
+   protected List<Pair<Supplier<Consumer<BiConsumer<Identifier, LootTable.Builder>>>, LootContextType>> getTables() {
+      return lootTypeGenerators;
+   }
+
+   protected void validate(Map<Identifier, LootTable> map, LootTableReporter validationtracker) {
+      for(Identifier resourcelocation : Sets.difference(LootTables.getAll(), map.keySet())) {
+         validationtracker.report("Missing built-in table: " + resourcelocation);
+      }
+
+      map.forEach((p_218436_2_, p_218436_3_) -> {
+         LootManager.validate(validationtracker, p_218436_2_, p_218436_3_);
+      });
+   }
+
    private static Path getOutput(Path pathIn, Identifier id) {
       return pathIn.resolve("data/" + id.getNamespace() + "/loot_tables/" + id.getPath() + ".json");
    }
