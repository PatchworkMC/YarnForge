--- a/net/minecraft/client/gui/screen/ingame/HandledScreen.java
+++ b/net/minecraft/client/gui/screen/ingame/HandledScreen.java
@@ -87,6 +87,7 @@
       int i = this.x;
       int j = this.y;
       this.drawBackground(matrixStack, partialTicks, mouseX, mouseY);
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.GuiContainerEvent.DrawBackground(this, matrixStack, mouseX, mouseY));
       RenderSystem.disableRescaleNormal();
       RenderSystem.disableDepthTest();
       super.render(matrixStack, mouseX, mouseY, partialTicks);
@@ -112,13 +113,15 @@
             int j1 = slot.x;
             int k1 = slot.y;
             RenderSystem.colorMask(true, true, true, false);
-            this.fillGradient(matrixStack, j1, k1, j1 + 16, k1 + 16, -2130706433, -2130706433);
+            int slotColor = this.getSlotColor(i1);
+            this.fillGradient(matrixStack, j1, k1, j1 + 16, k1 + 16, slotColor, slotColor);
             RenderSystem.colorMask(true, true, true, true);
             RenderSystem.enableDepthTest();
          }
       }
 
       this.drawForeground(matrixStack, mouseX, mouseY);
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.GuiContainerEvent.DrawForeground(this, matrixStack, mouseX, mouseY));
       PlayerInventory playerinventory = this.client.player.inventory;
       ItemStack itemstack = this.touchDragStack.isEmpty() ? playerinventory.getCursorStack() : this.touchDragStack;
       if (!itemstack.isEmpty()) {
@@ -168,8 +171,10 @@
       RenderSystem.translatef(0.0F, 0.0F, 32.0F);
       this.setZOffset(200);
       this.itemRenderer.zOffset = 200.0F;
+      net.minecraft.client.font.TextRenderer font = stack.getItem().getFontRenderer(stack);
+      if (font == null) font = this.textRenderer;
       this.itemRenderer.renderInGuiWithOverrides(stack, x, y);
-      this.itemRenderer.renderGuiItemOverlay(this.textRenderer, stack, x, y - (this.touchDragStack.isEmpty() ? 0 : 8), altText);
+      this.itemRenderer.renderGuiItemOverlay(font, stack, x, y - (this.touchDragStack.isEmpty() ? 0 : 8), altText);
       this.setZOffset(0);
       this.itemRenderer.zOffset = 0.0F;
    }
@@ -279,7 +284,8 @@
       if (super.mouseClicked(mouseX, mouseY, button)) {
          return true;
       } else {
-         boolean flag = this.client.options.keyPickItem.matchesMouse(button);
+         InputUtil.Key mouseKey = InputUtil.Type.MOUSE.createFromCode(button);
+         boolean flag = this.client.options.keyPickItem.isActiveAndMatches(mouseKey);
          Slot slot = this.getSlotAt(mouseX, mouseY);
          long i = Util.getMeasuringTimeMs();
          this.doubleClicking = this.lastClickedSlot == slot && i - this.lastButtonClickTime < 250L && this.lastClickedButton == button;
@@ -290,6 +296,7 @@
             int j = this.x;
             int k = this.y;
             boolean flag1 = this.isClickOutsideBounds(mouseX, mouseY, j, k, button);
+            if (slot != null) flag1 = false; // Forge, prevent dropping of items through slots outside of GUI boundaries
             int l = -1;
             if (slot != null) {
                l = slot.id;
@@ -315,7 +322,7 @@
                   }
                } else if (!this.cursorDragging) {
                   if (this.client.player.inventory.getCursorStack().isEmpty()) {
-                     if (this.client.options.keyPickItem.matchesMouse(button)) {
+                     if (this.client.options.keyPickItem.isActiveAndMatches(mouseKey)) {
                         this.onMouseClick(slot, l, button, SlotActionType.CLONE);
                      } else {
                         boolean flag2 = l != -999 && (InputUtil.isKeyPressed(MinecraftClient.getInstance().getWindow().getHandle(), 340) || InputUtil.isKeyPressed(MinecraftClient.getInstance().getWindow().getHandle(), 344));
@@ -339,7 +346,7 @@
                         this.heldButtonType = 0;
                      } else if (button == 1) {
                         this.heldButtonType = 1;
-                     } else if (this.client.options.keyPickItem.matchesMouse(button)) {
+                     } else if (this.client.options.keyPickItem.isActiveAndMatches(mouseKey)) {
                         this.heldButtonType = 2;
                      }
                   }
@@ -408,10 +415,13 @@
    }
 
    public boolean mouseReleased(double mouseX, double mouseY, int button) {
+      super.mouseReleased(mouseX, mouseY, button); //Forge, Call parent to release buttons
       Slot slot = this.getSlotAt(mouseX, mouseY);
       int i = this.x;
       int j = this.y;
       boolean flag = this.isClickOutsideBounds(mouseX, mouseY, i, j, button);
+      if (slot != null) flag = false; // Forge, prevent dropping of items through slots outside of GUI boundaries
+      InputUtil.Key mouseKey = InputUtil.Type.MOUSE.createFromCode(button);
       int k = -1;
       if (slot != null) {
          k = slot.id;
@@ -425,7 +435,7 @@
          if (hasShiftDown()) {
             if (!this.quickMovingStack.isEmpty()) {
                for(Slot slot2 : this.handler.slots) {
-                  if (slot2 != null && slot2.canTakeItems(this.client.player) && slot2.hasStack() && slot2.inventory == slot.inventory && ScreenHandler.canInsertItemIntoSlot(slot2, this.quickMovingStack, true)) {
+                  if (slot2 != null && slot2.canTakeItems(this.client.player) && slot2.hasStack() && slot2.isSameInventory(slot) && ScreenHandler.canInsertItemIntoSlot(slot2, this.quickMovingStack, true)) {
                      this.onMouseClick(slot2, slot2.id, button, SlotActionType.QUICK_MOVE);
                   }
                }
@@ -489,7 +499,7 @@
 
             this.onMouseClick((Slot)null, -999, ScreenHandler.packQuickCraftData(2, this.heldButtonType), SlotActionType.QUICK_CRAFT);
          } else if (!this.client.player.inventory.getCursorStack().isEmpty()) {
-            if (this.client.options.keyPickItem.matchesMouse(button)) {
+            if (this.client.options.keyPickItem.isActiveAndMatches(mouseKey)) {
                this.onMouseClick(slot, k, button, SlotActionType.CLONE);
             } else {
                boolean flag1 = k != -999 && (InputUtil.isKeyPressed(MinecraftClient.getInstance().getWindow().getHandle(), 340) || InputUtil.isKeyPressed(MinecraftClient.getInstance().getWindow().getHandle(), 344));
@@ -531,34 +541,39 @@
    }
 
    public boolean keyPressed(int keyCode, int scanCode, int modifiers) {
+      InputUtil.Key mouseKey = InputUtil.fromKeyCode(keyCode, scanCode);
       if (super.keyPressed(keyCode, scanCode, modifiers)) {
          return true;
-      } else if (this.client.options.keyInventory.matchesKey(keyCode, scanCode)) {
+      } else if (this.client.options.keyInventory.isActiveAndMatches(mouseKey)) {
          this.onClose();
          return true;
       } else {
-         this.handleHotbarKeyPressed(keyCode, scanCode);
+         boolean handled = this.handleHotbarKeyPressed(keyCode, scanCode);// Forge MC-146650: Needs to return true when the key is handled
          if (this.focusedSlot != null && this.focusedSlot.hasStack()) {
-            if (this.client.options.keyPickItem.matchesKey(keyCode, scanCode)) {
+            if (this.client.options.keyPickItem.isActiveAndMatches(mouseKey)) {
                this.onMouseClick(this.focusedSlot, this.focusedSlot.id, 0, SlotActionType.CLONE);
-            } else if (this.client.options.keyDrop.matchesKey(keyCode, scanCode)) {
+               handled = true;
+            } else if (this.client.options.keyDrop.isActiveAndMatches(mouseKey)) {
                this.onMouseClick(this.focusedSlot, this.focusedSlot.id, hasControlDown() ? 1 : 0, SlotActionType.THROW);
+               handled = true;
             }
+         } else if (this.client.options.keyDrop.isActiveAndMatches(mouseKey)) {
+             handled = true; // Forge MC-146650: Emulate MC bug, so we don't drop from hotbar when pressing drop without hovering over a item.
          }
 
-         return true;
+         return handled;
       }
    }
 
    protected boolean handleHotbarKeyPressed(int keyCode, int scanCode) {
       if (this.client.player.inventory.getCursorStack().isEmpty() && this.focusedSlot != null) {
-         if (this.client.options.keySwapHands.matchesKey(keyCode, scanCode)) {
+         if (this.client.options.keySwapHands.isActiveAndMatches(InputUtil.fromKeyCode(keyCode, scanCode))) {
             this.onMouseClick(this.focusedSlot, this.focusedSlot.id, 40, SlotActionType.SWAP);
             return true;
          }
 
          for(int i = 0; i < 9; ++i) {
-            if (this.client.options.keysHotbar[i].matchesKey(keyCode, scanCode)) {
+            if (this.client.options.keysHotbar[i].isActiveAndMatches(InputUtil.fromKeyCode(keyCode, scanCode))) {
                this.onMouseClick(this.focusedSlot, this.focusedSlot.id, i, SlotActionType.SWAP);
                return true;
             }
@@ -590,6 +605,18 @@
       return this.handler;
    }
 
+   @javax.annotation.Nullable
+   public Slot getSlotUnderMouse() { return this.focusedSlot; }
+   public int getGuiLeft() { return x; }
+   public int getGuiTop() { return y; }
+   public int getXSize() { return backgroundWidth; }
+   public int getYSize() { return backgroundHeight; }
+
+   protected int slotColor = -2130706433;
+   public int getSlotColor(int index) {
+      return slotColor;
+   }
+
    public void onClose() {
       this.client.player.updateSubmergedInWaterState();
       super.onClose();
