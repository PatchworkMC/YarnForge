--- a/net/minecraft/client/render/item/ItemRenderer.java
+++ b/net/minecraft/client/render/item/ItemRenderer.java
@@ -67,7 +67,7 @@
 
    public ItemRenderer(TextureManager textureManagerIn, BakedModelManager modelManagerIn, ItemColors itemColorsIn) {
       this.textureManager = textureManagerIn;
-      this.models = new ItemModels(modelManagerIn);
+      this.models = new net.minecraftforge.client.ItemModelMesherForge(modelManagerIn);
 
       for(Item item : Registry.ITEM) {
          if (!WITHOUT_MODELS.contains(item)) {
@@ -103,7 +103,7 @@
             modelIn = this.models.getModelManager().getModel(new ModelIdentifier("minecraft:trident#inventory"));
          }
 
-         modelIn.getTransformation().getTransformation(transformTypeIn).apply(leftHand, matrixStackIn);
+         modelIn = net.minecraftforge.client.ForgeHooksClient.handleCameraTransforms(matrixStackIn, modelIn, transformTypeIn, leftHand);
          matrixStackIn.translate(-0.5D, -0.5D, -0.5D);
          if (!modelIn.isBuiltin() && (itemStackIn.getItem() != Items.TRIDENT || flag)) {
             boolean flag1;
@@ -113,7 +113,8 @@
             } else {
                flag1 = true;
             }
-
+            if (modelIn.isLayered()) { net.minecraftforge.client.ForgeHooksClient.drawItemLayered(this, modelIn, itemStackIn, matrixStackIn, bufferIn, combinedLightIn, combinedOverlayIn, flag1); }
+            else {
             RenderLayer rendertype = RenderLayers.getItemLayer(itemStackIn, flag1);
             VertexConsumer ivertexbuilder;
             if (itemStackIn.getItem() == Items.COMPASS && itemStackIn.hasGlint()) {
@@ -139,8 +140,9 @@
             }
 
             this.renderBakedItemModel(modelIn, itemStackIn, combinedLightIn, combinedOverlayIn, matrixStackIn, ivertexbuilder);
+            }
          } else {
-            BuiltinModelItemRenderer.INSTANCE.render(itemStackIn, transformTypeIn, matrixStackIn, bufferIn, combinedLightIn, combinedOverlayIn);
+            itemStackIn.getItem().getItemStackTileEntityRenderer().render(itemStackIn, transformTypeIn, matrixStackIn, bufferIn, combinedLightIn, combinedOverlayIn);
          }
 
          matrixStackIn.pop();
@@ -184,7 +186,7 @@
          float f = (float)(i >> 16 & 255) / 255.0F;
          float f1 = (float)(i >> 8 & 255) / 255.0F;
          float f2 = (float)(i & 255) / 255.0F;
-         bufferIn.quad(matrixstack$entry, bakedquad, f, f1, f2, combinedLightIn, combinedOverlayIn);
+         bufferIn.addVertexData(matrixstack$entry, bakedquad, f, f1, f2, combinedLightIn, combinedOverlayIn, true);
       }
 
    }
@@ -275,6 +277,7 @@
             crashreportcategory.add("Item Type", () -> {
                return String.valueOf((Object)stack.getItem());
             });
+            crashreportcategory.add("Registry Name", () -> String.valueOf(stack.getItem().getRegistryName()));
             crashreportcategory.add("Item Damage", () -> {
                return String.valueOf(stack.getDamage());
             });
@@ -306,18 +309,16 @@
             irendertypebuffer$impl.draw();
          }
 
-         if (stack.isDamaged()) {
+         if (stack.getItem().showDurabilityBar(stack)) {
             RenderSystem.disableDepthTest();
             RenderSystem.disableTexture();
             RenderSystem.disableAlphaTest();
             RenderSystem.disableBlend();
             Tessellator tessellator = Tessellator.getInstance();
             BufferBuilder bufferbuilder = tessellator.getBuffer();
-            float f = (float)stack.getDamage();
-            float f1 = (float)stack.getMaxDamage();
-            float f2 = Math.max(0.0F, (f1 - f) / f1);
-            int i = Math.round(13.0F - f * 13.0F / f1);
-            int j = MathHelper.hsvToRgb(f2 / 3.0F, 1.0F, 1.0F);
+            double health = stack.getItem().getDurabilityForDisplay(stack);
+            int i = Math.round(13.0F - (float)health * 13.0F);
+            int j = stack.getItem().getRGBDurabilityForDisplay(stack);
             this.renderGuiQuad(bufferbuilder, xPosition + 2, yPosition + 13, 13, 2, 0, 0, 0, 255);
             this.renderGuiQuad(bufferbuilder, xPosition + 2, yPosition + 13, i, 1, j >> 16 & 255, j >> 8 & 255, j & 255, 255);
             RenderSystem.enableBlend();
@@ -355,4 +356,9 @@
    public void apply(ResourceManager resourceManager) {
       this.models.reloadModels();
    }
+
+   @Override
+   public net.minecraftforge.resource.IResourceType getResourceType() {
+      return net.minecraftforge.resource.VanillaResourceType.MODELS;
+   }
 }
