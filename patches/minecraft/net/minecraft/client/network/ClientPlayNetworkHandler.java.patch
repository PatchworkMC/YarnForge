--- a/net/minecraft/client/network/ClientPlayNetworkHandler.java
+++ b/net/minecraft/client/network/ClientPlayNetworkHandler.java
@@ -380,6 +380,7 @@
 
       this.client.debugRenderer.reset();
       this.client.player.afterSpawn();
+      net.minecraftforge.fml.client.ClientHooks.firePlayerLogin(this.client.interactionManager, this.client.player, this.client.getNetworkHandler().getConnection());
       int i = packetIn.getEntityId();
       this.world.addPlayer(i, this.client.player);
       this.client.player.input = new KeyboardInput(this.client.options);
@@ -391,6 +392,7 @@
       this.client.player.setShowsDeathScreen(packetIn.showsDeathScreen());
       this.client.interactionManager.setGameMode(packetIn.getGameMode());
       this.client.interactionManager.setPreviousGameMode(packetIn.getPreviousGameMode());
+      net.minecraftforge.fml.network.NetworkHooks.sendMCRegistryPackets(connection, "PLAY_TO_SERVER");
       this.client.options.onPlayerModelPartChange();
       this.connection.send(new CustomPayloadC2SPacket(CustomPayloadC2SPacket.BRAND, (new PacketByteBuf(Unpooled.buffer())).writeString(ClientBrandRetriever.getClientModName())));
       this.client.getGame().onStartGameSession();
@@ -730,7 +732,7 @@
          BlockPos blockpos = new BlockPos(compoundnbt.getInt("x"), compoundnbt.getInt("y"), compoundnbt.getInt("z"));
          BlockEntity tileentity = this.world.getBlockEntity(blockpos);
          if (tileentity != null) {
-            tileentity.fromTag(this.world.getBlockState(blockpos), compoundnbt);
+            tileentity.handleUpdateTag(this.world.getBlockState(blockpos), compoundnbt);
          }
       }
 
@@ -811,7 +813,9 @@
 
    public void onGameMessage(GameMessageS2CPacket packetIn) {
       NetworkThreadUtils.forceMainThread(packetIn, this, this.client);
-      this.client.inGameHud.addChatMessage(packetIn.getLocation(), packetIn.getMessage(), packetIn.getSenderUuid());
+      net.minecraft.text.Text message = net.minecraftforge.event.ForgeEventFactory.onClientChat(packetIn.getLocation(), packetIn.getMessage(), packetIn.getSenderUuid());
+      if (message == null) return;
+      this.client.inGameHud.addChatMessage(packetIn.getLocation(), message, packetIn.getSenderUuid());
    }
 
    public void onEntityAnimation(EntityAnimationS2CPacket packetIn) {
@@ -1000,8 +1004,10 @@
          clientplayerentity1.getAttributes().setFrom(clientplayerentity.getAttributes());
       }
 
+      clientplayerentity1.updateSyncFields(clientplayerentity); // Forge: fix MC-10657
       clientplayerentity1.afterSpawn();
       clientplayerentity1.setServerBrand(s);
+      net.minecraftforge.fml.client.ClientHooks.firePlayerRespawn(this.client.interactionManager, clientplayerentity, clientplayerentity1, clientplayerentity1.networkHandler.getConnection());
       this.world.addPlayer(i, clientplayerentity1);
       clientplayerentity1.yaw = -180.0F;
       clientplayerentity1.input = new KeyboardInput(this.client.options);
@@ -1127,6 +1133,12 @@
 
       if (flag && this.client.currentScreen instanceof CommandBlockScreen) {
          ((CommandBlockScreen)this.client.currentScreen).updateCommandBlock();
+      } else {
+         if(tileentity == null) {
+            LOGGER.error("Received invalid update packet for null tile entity at {} with data: {}", packetIn.getPos(), packetIn.getCompoundTag());
+            return;
+         }
+         tileentity.onDataPacket(connection, packetIn);
       }
 
    }
@@ -1295,6 +1307,7 @@
       clientrecipebook.reload(this.recipeManager.values());
       clientrecipebook.getOrderedResults().forEach(imutablesearchtree::add);
       imutablesearchtree.reload();
+      net.minecraftforge.client.ForgeHooksClient.onRecipesUpdated(this.recipeManager);
    }
 
    public void onLookAt(LookAtS2CPacket packetIn) {
@@ -1372,7 +1385,7 @@
       NetworkThreadUtils.forceMainThread(packetIn, this, this.client);
       Entity entity = this.world.getEntityById(packetIn.getEntityId());
       if (entity instanceof LivingEntity) {
-         StatusEffect effect = StatusEffect.byRawId(packetIn.getEffectId());
+         StatusEffect effect = StatusEffect.byRawId(packetIn.getEffectId() & 0xFF);
          if (effect != null) {
             StatusEffectInstance effectinstance = new StatusEffectInstance(effect, packetIn.getDuration(), packetIn.getAmplifier(), packetIn.isAmbient(), packetIn.shouldShowParticles(), packetIn.shouldShowIcon());
             effectinstance.setPermanent(packetIn.isPermanent());
@@ -1384,11 +1397,14 @@
    public void onSynchronizeTags(SynchronizeTagsS2CPacket packetIn) {
       NetworkThreadUtils.forceMainThread(packetIn, this, this.client);
       TagManager itagcollectionsupplier = packetIn.getTagManager();
-      Multimap<Identifier, Identifier> multimap = RequiredTagListRegistry.getMissingTags(itagcollectionsupplier);
+      boolean vanillaConnection = net.minecraftforge.fml.network.NetworkHooks.isVanillaConnection(connection);
+      Multimap<Identifier, Identifier> multimap = vanillaConnection ? RequiredTagListRegistry.getMissingTags(net.minecraftforge.common.ForgeTagHandler.withNoCustom(itagcollectionsupplier)) : RequiredTagListRegistry.validateVanillaTags(itagcollectionsupplier);//Forge: If we are connecting to vanilla validate all tags to properly validate custom tags the client may "require", and if we are connecting to forge only validate the vanilla tag types as the custom tag types get synced in a separate packet so may still arrive
       if (!multimap.isEmpty()) {
          LOGGER.warn("Incomplete server tags, disconnecting. Missing: {}", (Object)multimap);
          this.connection.disconnect(new TranslatableText("multiplayer.disconnect.missing_tags"));
       } else {
+         net.minecraftforge.common.ForgeTagHandler.resetCachedTagCollections(true, vanillaConnection);
+         itagcollectionsupplier = TagManager.reinjectOptionalTags(itagcollectionsupplier);
          this.tagManager = itagcollectionsupplier;
          if (!this.connection.isLocal()) {
             itagcollectionsupplier.apply();
@@ -1881,10 +1897,12 @@
             int l5 = packetbuffer.readInt();
             this.client.debugRenderer.gameTestDebugRenderer.addMarker(blockpos8, l3, s10, l5);
          } else {
-            LOGGER.warn("Unknown custom packed identifier: {}", (Object)resourcelocation);
+            if (!net.minecraftforge.fml.network.NetworkHooks.onCustomPayload(packetIn, this.connection))
+            LOGGER.warn("Unknown custom packet identifier: {}", (Object)resourcelocation);
          }
       } finally {
          if (packetbuffer != null) {
+            if (false) // Forge: let packet handle releasing buffer
             packetbuffer.release();
          }
 
