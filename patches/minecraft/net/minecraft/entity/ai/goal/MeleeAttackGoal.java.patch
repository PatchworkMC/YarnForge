--- a/net/minecraft/entity/ai/goal/MeleeAttackGoal.java
+++ b/net/minecraft/entity/ai/goal/MeleeAttackGoal.java
@@ -20,6 +20,8 @@
    private int field_24667;
    private final int attackIntervalTicks = 20;
    private long lastUpdateTime;
+   private int failedPathFindingPenalty = 0;
+   private boolean canPenalize = false;
 
    public MeleeAttackGoal(PathAwareEntity creature, double speedIn, boolean useLongMemory) {
       this.mob = creature;
@@ -40,6 +42,15 @@
          } else if (!livingentity.isAlive()) {
             return false;
          } else {
+           if (canPenalize) {
+               if (--this.updateCountdownTicks <= 0) {
+                  this.path = this.mob.getNavigation().findPathTo(livingentity, 0);
+                  this.updateCountdownTicks = 4 + this.mob.getRandom().nextInt(7);
+                  return this.path != null;
+               } else {
+                  return true;
+               }
+            }
             this.path = this.mob.getNavigation().findPathTo(livingentity, 0);
             if (this.path != null) {
                return true;
@@ -92,6 +103,18 @@
          this.targetY = livingentity.getY();
          this.targetZ = livingentity.getZ();
          this.updateCountdownTicks = 4 + this.mob.getRandom().nextInt(7);
+         if (this.canPenalize) {
+            this.updateCountdownTicks += failedPathFindingPenalty;
+            if (this.mob.getNavigation().getCurrentPath() != null) {
+               net.minecraft.entity.ai.pathing.PathNode finalPathPoint = this.mob.getNavigation().getCurrentPath().getEnd();
+               if (finalPathPoint != null && livingentity.squaredDistanceTo(finalPathPoint.x, finalPathPoint.y, finalPathPoint.z) < 1)
+                  failedPathFindingPenalty = 0;
+               else
+                  failedPathFindingPenalty += 10;
+            } else {
+               failedPathFindingPenalty += 10;
+            }
+         }
          if (d0 > 1024.0D) {
             this.updateCountdownTicks += 10;
          } else if (d0 > 256.0D) {
