--- a/net/minecraft/entity/Entity.java
+++ b/net/minecraft/entity/Entity.java
@@ -108,12 +108,13 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public abstract class Entity implements Nameable, CommandOutput {
+public abstract class Entity extends net.minecraftforge.common.capabilities.CapabilityProvider<Entity> implements Nameable, CommandOutput, net.minecraftforge.common.extensions.IForgeEntity {
    protected static final Logger LOGGER = LogManager.getLogger();
    private static final AtomicInteger MAX_ENTITY_ID = new AtomicInteger();
    private static final List<ItemStack> EMPTY_STACK_LIST = Collections.emptyList();
    private static final Box NULL_BOX = new Box(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
    private static double renderDistanceMultiplier = 1.0D;
+   @Deprecated // Forge: Use the getter to allow overriding in mods
    private final EntityType<?> type;
    private int entityId = MAX_ENTITY_ID.incrementAndGet();
    public boolean inanimate;
@@ -139,6 +140,7 @@
    public boolean verticalCollision;
    public boolean velocityModified;
    protected Vec3d movementMultiplier = Vec3d.ZERO;
+   @Deprecated //Forge: Use isAlive, remove(boolean) and revive() instead of directly accessing this field. To allow the entity to react to and better control this information.
    public boolean removed;
    public float prevHorizontalSpeed;
    public float horizontalSpeed;
@@ -194,6 +196,7 @@
    private float standingEyeHeight;
 
    public Entity(EntityType<?> entityTypeIn, World worldIn) {
+      super(Entity.class);
       this.type = entityTypeIn;
       this.world = worldIn;
       this.dimensions = entityTypeIn.getDimensions();
@@ -210,7 +213,11 @@
       this.dataTracker.startTracking(NO_GRAVITY, false);
       this.dataTracker.startTracking(POSE, EntityPose.STANDING);
       this.initDataTracker();
-      this.standingEyeHeight = this.getEyeHeight(EntityPose.STANDING, this.dimensions);
+      net.minecraftforge.event.entity.EntityEvent.Size sizeEvent = net.minecraftforge.event.ForgeEventFactory.getEntitySizeForge(this, EntityPose.STANDING, this.dimensions, this.getEyeHeight(EntityPose.STANDING, this.dimensions));
+      this.dimensions = sizeEvent.getNewSize();
+      this.standingEyeHeight = sizeEvent.getNewEyeHeight();
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityEvent.EntityConstructing(this));
+      this.gatherCapabilities();
    }
 
    @Environment(EnvType.CLIENT)
@@ -316,7 +323,13 @@
    }
 
    public void remove() {
+      this.remove(false);
+   }
+
+   public void remove(boolean keepData) {
       this.removed = true;
+      if (!keepData)
+         this.invalidateCaps();
    }
 
    public void setPose(EntityPose poseIn) {
@@ -329,6 +342,7 @@
 
    public boolean isInRange(Entity entity, double distance) {
       double d0 = entity.pos.x - this.pos.x;
+      if (this.isAddedToWorld() && !this.world.isClient && world instanceof ServerWorld) ((ServerWorld)this.world).checkEntityChunkPos(this); // Forge - Process chunk registration after moving.
       double d1 = entity.pos.y - this.pos.y;
       double d2 = entity.pos.z - this.pos.z;
       return d0 * d0 + d1 * d1 + d2 * d2 < distance * distance;
@@ -559,7 +573,7 @@
 
             this.horizontalSpeed = (float)((double)this.horizontalSpeed + (double)MathHelper.sqrt(squaredHorizontalLength(vector3d)) * 0.6D);
             this.distanceTraveled = (float)((double)this.distanceTraveled + (double)MathHelper.sqrt(d0 * d0 + d1 * d1 + d2 * d2) * 0.6D);
-            if (this.distanceTraveled > this.nextStepSoundDistance && !blockstate.isAir()) {
+            if (this.distanceTraveled > this.nextStepSoundDistance && !blockstate.isAir(this.world, blockpos)) {
                this.nextStepSoundDistance = this.calculateNextStepSoundDistance();
                if (this.isTouchingWater()) {
                   Entity entity = this.hasPassengers() && this.getPrimaryPassenger() != null ? this.getPrimaryPassenger() : this;
@@ -574,7 +588,7 @@
                } else {
                   this.playStepSound(blockpos, blockstate);
                }
-            } else if (this.distanceTraveled > this.nextFlySoundDistance && this.hasWings() && blockstate.isAir()) {
+            } else if (this.distanceTraveled > this.nextFlySoundDistance && this.hasWings() && blockstate.isAir(this.world, blockpos)) {
                this.nextFlySoundDistance = this.playFlySound(this.distanceTraveled);
             }
          }
@@ -590,8 +604,9 @@
 
          float f2 = this.getVelocityMultiplier();
          this.setVelocity(this.getVelocity().multiply((double)f2, 1.0D, (double)f2));
-         if (this.world.method_29556(this.getBoundingBox().contract(0.001D)).noneMatch((p_233572_0_) -> {
-            return p_233572_0_.isIn(BlockTags.FIRE) || p_233572_0_.isOf(Blocks.LAVA);
+         if (BlockPos.stream(this.getBoundingBox().contract(0.001D)).noneMatch((p_233572_0_) -> {
+            BlockState state = world.getBlockState(p_233572_0_);
+            return state.isIn(BlockTags.FIRE) || state.isOf(Blocks.LAVA) || state.isBurning(world, p_233572_0_);
          }) && this.fireTicks <= 0) {
             this.setFireTicks(-this.getBurningDuration());
          }
@@ -610,11 +625,10 @@
       int j = MathHelper.floor(this.pos.y - (double)0.2F);
       int k = MathHelper.floor(this.pos.z);
       BlockPos blockpos = new BlockPos(i, j, k);
-      if (this.world.getBlockState(blockpos).isAir()) {
+      if (this.world.isAir(blockpos)) {
          BlockPos blockpos1 = blockpos.down();
          BlockState blockstate = this.world.getBlockState(blockpos1);
-         Block block = blockstate.getBlock();
-         if (block.isIn(BlockTags.FENCES) || block.isIn(BlockTags.WALLS) || block instanceof FenceGateBlock) {
+         if (blockstate.collisionExtendsVertically(this.world, blockpos1, this)) {
             return blockpos1;
          }
       }
@@ -800,6 +814,7 @@
    public void moveToBoundingBoxCenter() {
       Box axisalignedbb = this.getBoundingBox();
       this.setPos((axisalignedbb.minX + axisalignedbb.maxX) / 2.0D, axisalignedbb.minY, (axisalignedbb.minZ + axisalignedbb.maxZ) / 2.0D);
+      if (this.isAddedToWorld() && !this.world.isClient && world instanceof ServerWorld) ((ServerWorld)this.world).checkEntityChunkPos(this); // Forge - Process chunk registration after moving.
    }
 
    protected SoundEvent getSwimSound() {
@@ -848,7 +863,7 @@
    protected void playStepSound(BlockPos pos, BlockState blockIn) {
       if (!blockIn.getMaterial().isLiquid()) {
          BlockState blockstate = this.world.getBlockState(pos.up());
-         BlockSoundGroup soundtype = blockstate.isOf(Blocks.SNOW) ? blockstate.getSoundGroup() : blockIn.getSoundGroup();
+         BlockSoundGroup soundtype = blockstate.isOf(Blocks.SNOW) ? blockstate.getSoundType(world, pos, this) : blockIn.getSoundType(world, pos, this);
          this.playSound(soundtype.getStepSound(), soundtype.getVolume() * 0.15F, soundtype.getPitch());
       }
    }
@@ -1055,9 +1070,10 @@
       int k = MathHelper.floor(this.getZ());
       BlockPos blockpos = new BlockPos(i, j, k);
       BlockState blockstate = this.world.getBlockState(blockpos);
+      if(!blockstate.addRunningEffects(world, blockpos, this))
       if (blockstate.getRenderType() != BlockRenderType.INVISIBLE) {
          Vec3d vector3d = this.getVelocity();
-         this.world.addParticle(new BlockStateParticleEffect(ParticleTypes.BLOCK, blockstate), this.getX() + (this.random.nextDouble() - 0.5D) * (double)this.dimensions.width, this.getY() + 0.1D, this.getZ() + (this.random.nextDouble() - 0.5D) * (double)this.dimensions.width, vector3d.x * -4.0D, 1.5D, vector3d.z * -4.0D);
+         this.world.addParticle(new BlockStateParticleEffect(ParticleTypes.BLOCK, blockstate).setPos(blockpos), this.getX() + (this.random.nextDouble() - 0.5D) * (double)this.dimensions.width, this.getY() + 0.1D, this.getZ() + (this.random.nextDouble() - 0.5D) * (double)this.dimensions.width, vector3d.x * -4.0D, 1.5D, vector3d.z * -4.0D);
       }
 
    }
@@ -1376,6 +1392,7 @@
          if (this.glowing) {
             compound.putBoolean("Glowing", this.glowing);
          }
+         compound.putBoolean("CanUpdate", canUpdate);
 
          if (!this.scoreboardTags.isEmpty()) {
             ListTag listnbt = new ListTag();
@@ -1387,6 +1404,10 @@
             compound.put("Tags", listnbt);
          }
 
+         CompoundTag caps = serializeCaps();
+         if (caps != null) compound.put("ForgeCaps", caps);
+         if (persistentData != null) compound.put("ForgeData", persistentData);
+
          this.writeCustomDataToTag(compound);
          if (this.hasPassengers()) {
             ListTag listnbt1 = new ListTag();
@@ -1457,6 +1478,9 @@
                this.setSilent(compound.getBoolean("Silent"));
                this.setNoGravity(compound.getBoolean("NoGravity"));
                this.setGlowing(compound.getBoolean("Glowing"));
+               if (compound.contains("ForgeData", 10)) persistentData = compound.getCompound("ForgeData");
+               if (compound.contains("CanUpdate", 99)) this.canUpdate(compound.getBoolean("CanUpdate"));
+               if (compound.contains("ForgeCaps", 10)) deserializeCaps(compound.getCompound("ForgeCaps"));
                if (compound.contains("Tags", 9)) {
                   this.scoreboardTags.clear();
                   ListTag listnbt3 = compound.getList("Tags", 8);
@@ -1545,6 +1569,8 @@
       } else {
          ItemEntity itementity = new ItemEntity(this.world, this.getX(), this.getY() + (double)offsetY, this.getZ(), stack);
          itementity.setToDefaultPickupDelay();
+         if (captureDrops() != null) captureDrops().add(itementity);
+         else
          this.world.spawnEntity(itementity);
          return itementity;
       }
@@ -1581,6 +1607,7 @@
 
    public void tickRiding() {
       this.setVelocity(Vec3d.ZERO);
+      if (canUpdate())
       this.tick();
       if (this.hasVehicle()) {
          this.getVehicle().updatePassengerPosition(this);
@@ -1626,6 +1653,7 @@
          }
       }
 
+      if (!net.minecraftforge.event.ForgeEventFactory.canMountEntity(this, entityIn, true)) return false;
       if (force || this.canStartRiding(entityIn) && entityIn.canAddPassenger(this)) {
          if (this.hasVehicle()) {
             this.stopRiding();
@@ -1658,6 +1686,7 @@
    public void method_29239() {
       if (this.vehicle != null) {
          Entity entity = this.vehicle;
+         if (!net.minecraftforge.event.ForgeEventFactory.canMountEntity(this, entity, false)) return;
          this.vehicle = null;
          entity.removePassenger(this);
       }
@@ -1815,6 +1844,7 @@
       return !this.getPassengerList().isEmpty();
    }
 
+   @Deprecated //Forge: Use rider sensitive version
    public boolean canBeRiddenInWater() {
       return true;
    }
@@ -2031,7 +2061,7 @@
    }
 
    protected Text getDefaultName() {
-      return this.type.getName();
+      return this.getType().getName(); // Forge: Use getter to allow overriding by mods
    }
 
    public boolean isPartOf(Entity entityIn) {
@@ -2086,14 +2116,19 @@
 
    @Nullable
    public Entity moveToWorld(ServerWorld server) {
+      return this.changeDimension(server, server.getPortalForcer());
+   }
+   @Nullable
+   public Entity changeDimension(ServerWorld server, net.minecraftforge.common.util.ITeleporter teleporter) {
       if (this.world instanceof ServerWorld && !this.removed) {
          this.world.getProfiler().push("changeDimension");
          this.detach();
          this.world.getProfiler().push("reposition");
-         TeleportTarget portalinfo = this.getTeleportTarget(server);
+         TeleportTarget portalinfo = teleporter.getPortalInfo(this, server, this::getTeleportTarget);
          if (portalinfo == null) {
             return null;
          } else {
+            Entity transportedEntity = teleporter.placeEntity(this, (ServerWorld) this.world, server, this.yaw, spawnPortal -> { //Forge: Start vanilla logic
             this.world.getProfiler().swap("reloading");
             Entity entity = this.getType().create(server);
             if (entity != null) {
@@ -2101,17 +2136,19 @@
                entity.refreshPositionAndAngles(portalinfo.position.x, portalinfo.position.y, portalinfo.position.z, portalinfo.yaw, entity.pitch);
                entity.setVelocity(portalinfo.velocity);
                server.onDimensionChanged(entity);
-               if (server.getRegistryKey() == World.END) {
+               if (spawnPortal && server.getRegistryKey() == World.END) {
                   ServerWorld.createEndSpawnPlatform(server);
                }
             }
+            return entity;
+            }); //Forge: End vanilla logic
 
             this.method_30076();
             this.world.getProfiler().pop();
             ((ServerWorld)this.world).resetIdleTimeout();
             server.resetIdleTimeout();
             this.world.getProfiler().pop();
-            return entity;
+            return transportedEntity;
          }
       } else {
          return null;
@@ -2319,9 +2356,10 @@
    public void calculateDimensions() {
       EntityDimensions entitysize = this.dimensions;
       EntityPose pose = this.getPose();
-      EntityDimensions entitysize1 = this.getDimensions(pose);
+      net.minecraftforge.event.entity.EntityEvent.Size sizeEvent = net.minecraftforge.event.ForgeEventFactory.getEntitySizeForge(this, pose, this.getDimensions(pose), this.getEyeHeight(pose, entitysize));
+      EntityDimensions entitysize1 = sizeEvent.getNewSize();
       this.dimensions = entitysize1;
-      this.standingEyeHeight = this.getEyeHeight(pose, entitysize1);
+      this.standingEyeHeight = sizeEvent.getNewEyeHeight();
       if (entitysize1.width < entitysize.width) {
          double d0 = (double)entitysize1.width / 2.0D;
          this.setBoundingBox(new Box(this.getX() - d0, this.getY(), this.getZ() - d0, this.getX() + d0, this.getY() + (double)entitysize1.height, this.getZ() + d0));
@@ -2795,6 +2833,7 @@
 
          this.chunkPosUpdateRequested = true;
       }
+      if (this.isAddedToWorld() && !this.world.isClient && !this.removed) this.world.getChunk((int) Math.floor(x) >> 4, (int) Math.floor(z) >> 4); // Forge - ensure target chunk is loaded.
 
    }
 
@@ -2810,4 +2849,63 @@
    public interface PositionUpdater {
       void accept(Entity p_accept_1_, double p_accept_2_, double p_accept_4_, double p_accept_6_);
    }
+
+   /* ================================== Forge Start =====================================*/
+
+   private boolean canUpdate = true;
+   @Override
+   public void canUpdate(boolean value) {
+      this.canUpdate = value;
+   }
+   @Override
+   public boolean canUpdate() {
+      return this.canUpdate;
+   }
+   private Collection<ItemEntity> captureDrops = null;
+   @Override
+   public Collection<ItemEntity> captureDrops() {
+      return captureDrops;
+   }
+   @Override
+   public Collection<ItemEntity> captureDrops(Collection<ItemEntity> value) {
+      Collection<ItemEntity> ret = captureDrops;
+      this.captureDrops = value;
+      return ret;
+   }
+   private CompoundTag persistentData;
+   @Override
+   public CompoundTag getPersistentData() {
+      if (persistentData == null)
+         persistentData = new CompoundTag();
+      return persistentData;
+   }
+   @Override
+   public boolean canTrample(BlockState state, BlockPos pos, float fallDistance) {
+      return world.random.nextFloat() < fallDistance - 0.5F
+              && this instanceof LivingEntity
+              && (this instanceof PlayerEntity || net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(world, this))
+              && this.getWidth() * this.getWidth() * this.getHeight() > 0.512F;
+   }
+
+   /**
+    * Internal use for keeping track of entities that are tracked by a world, to
+    * allow guarantees that entity position changes will force a chunk load, avoiding
+    * potential issues with entity desyncing and bad chunk data.
+    */
+   private boolean isAddedToWorld;
+
+   @Override
+   public final boolean isAddedToWorld() { return this.isAddedToWorld; }
+
+   @Override
+   public void onAddedToWorld() { this.isAddedToWorld = true; }
+
+   @Override
+   public void onRemovedFromWorld() { this.isAddedToWorld = false; }
+
+   @Override
+   public void revive() {
+      this.removed = false;
+      this.reviveCaps();
+   }
 }
