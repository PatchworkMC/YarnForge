--- a/net/minecraft/entity/attribute/DefaultAttributeRegistry.java
+++ b/net/minecraft/entity/attribute/DefaultAttributeRegistry.java
@@ -72,13 +72,19 @@
 public class DefaultAttributeRegistry {
    private static final Logger LOGGER = LogManager.getLogger();
    private static final Map<EntityType<? extends LivingEntity>, DefaultAttributeContainer> DEFAULT_ATTRIBUTE_REGISTRY = ImmutableMap.<EntityType<? extends LivingEntity>, DefaultAttributeContainer>builder().put(EntityType.ARMOR_STAND, LivingEntity.createLivingAttributes().build()).put(EntityType.BAT, BatEntity.createBatAttributes().build()).put(EntityType.BEE, BeeEntity.createBeeAttributes().build()).put(EntityType.BLAZE, BlazeEntity.createLivingAttributes().build()).put(EntityType.CAT, CatEntity.createCatAttributes().build()).put(EntityType.CAVE_SPIDER, CaveSpiderEntity.createLivingAttributes().build()).put(EntityType.CHICKEN, ChickenEntity.createChickenAttributes().build()).put(EntityType.COD, FishEntity.createFishAttributes().build()).put(EntityType.COW, CowEntity.createCowAttributes().build()).put(EntityType.CREEPER, CreeperEntity.createLivingAttributes().build()).put(EntityType.DOLPHIN, DolphinEntity.createDolphinAttributes().build()).put(EntityType.DONKEY, AbstractDonkeyEntity.createAbstractDonkeyAttributes().build()).put(EntityType.DROWNED, ZombieEntity.createZombieAttributes().build()).put(EntityType.ELDER_GUARDIAN, ElderGuardianEntity.createElderGuardianAttributes().build()).put(EntityType.ENDERMAN, EndermanEntity.createEndermanAttributes().build()).put(EntityType.ENDERMITE, EndermiteEntity.createEndermiteAttributes().build()).put(EntityType.ENDER_DRAGON, EnderDragonEntity.createLivingAttributes().build()).put(EntityType.EVOKER, EvokerEntity.createEvokerAttributes().build()).put(EntityType.FOX, FoxEntity.createFoxAttributes().build()).put(EntityType.GHAST, GhastEntity.createGhastAttributes().build()).put(EntityType.GIANT, GiantEntity.createGiantAttributes().build()).put(EntityType.GUARDIAN, GuardianEntity.createGuardianAttributes().build()).put(EntityType.HOGLIN, HoglinEntity.createHoglinAttributes().build()).put(EntityType.HORSE, HorseBaseEntity.createBaseHorseAttributes().build()).put(EntityType.HUSK, ZombieEntity.createZombieAttributes().build()).put(EntityType.ILLUSIONER, IllusionerEntity.createIllusionerAttributes().build()).put(EntityType.IRON_GOLEM, IronGolemEntity.createIronGolemAttributes().build()).put(EntityType.LLAMA, LlamaEntity.createLlamaAttributes().build()).put(EntityType.MAGMA_CUBE, MagmaCubeEntity.createMagmaCubeAttributes().build()).put(EntityType.MOOSHROOM, CowEntity.createCowAttributes().build()).put(EntityType.MULE, AbstractDonkeyEntity.createAbstractDonkeyAttributes().build()).put(EntityType.OCELOT, OcelotEntity.createOcelotAttributes().build()).put(EntityType.PANDA, PandaEntity.createPandaAttributes().build()).put(EntityType.PARROT, ParrotEntity.createParrotAttributes().build()).put(EntityType.PHANTOM, HostileEntity.createHostileAttributes().build()).put(EntityType.PIG, PigEntity.createPigAttributes().build()).put(EntityType.PIGLIN, PiglinEntity.createPiglinAttributes().build()).put(EntityType.PIGLIN_BRUTE, PiglinBruteEntity.createPiglinBruteAttributes().build()).put(EntityType.PILLAGER, PillagerEntity.createPillagerAttributes().build()).put(EntityType.PLAYER, PlayerEntity.createPlayerAttributes().build()).put(EntityType.POLAR_BEAR, PolarBearEntity.createPolarBearAttributes().build()).put(EntityType.PUFFERFISH, FishEntity.createFishAttributes().build()).put(EntityType.RABBIT, RabbitEntity.createRabbitAttributes().build()).put(EntityType.RAVAGER, RavagerEntity.createRavagerAttributes().build()).put(EntityType.SALMON, FishEntity.createFishAttributes().build()).put(EntityType.SHEEP, SheepEntity.createSheepAttributes().build()).put(EntityType.SHULKER, ShulkerEntity.createShulkerAttributes().build()).put(EntityType.SILVERFISH, SilverfishEntity.createSilverfishAttributes().build()).put(EntityType.SKELETON, AbstractSkeletonEntity.createLivingAttributes().build()).put(EntityType.SKELETON_HORSE, SkeletonHorseEntity.createSkeletonHorseAttributes().build()).put(EntityType.SLIME, HostileEntity.createHostileAttributes().build()).put(EntityType.SNOW_GOLEM, SnowGolemEntity.createSnowGolemAttributes().build()).put(EntityType.SPIDER, SpiderEntity.createSpiderAttributes().build()).put(EntityType.SQUID, SquidEntity.createSquidAttributes().build()).put(EntityType.STRAY, AbstractSkeletonEntity.createLivingAttributes().build()).put(EntityType.STRIDER, StriderEntity.createStriderAttributes().build()).put(EntityType.TRADER_LLAMA, LlamaEntity.createLlamaAttributes().build()).put(EntityType.TROPICAL_FISH, FishEntity.createFishAttributes().build()).put(EntityType.TURTLE, TurtleEntity.createTurtleAttributes().build()).put(EntityType.VEX, VexEntity.createVexAttributes().build()).put(EntityType.VILLAGER, VillagerEntity.createVillagerAttributes().build()).put(EntityType.VINDICATOR, VindicatorEntity.createVindicatorAttributes().build()).put(EntityType.WANDERING_TRADER, MobEntity.createMobAttributes().build()).put(EntityType.WITCH, WitchEntity.createWitchAttributes().build()).put(EntityType.WITHER, WitherEntity.createWitherAttributes().build()).put(EntityType.WITHER_SKELETON, AbstractSkeletonEntity.createLivingAttributes().build()).put(EntityType.WOLF, WolfEntity.createWolfAttributes().build()).put(EntityType.ZOGLIN, ZoglinEntity.createZoglinAttributes().build()).put(EntityType.ZOMBIE, ZombieEntity.createZombieAttributes().build()).put(EntityType.ZOMBIE_HORSE, ZombieHorseEntity.createZombieHorseAttributes().build()).put(EntityType.ZOMBIE_VILLAGER, ZombieEntity.createZombieAttributes().build()).put(EntityType.ZOMBIFIED_PIGLIN, ZombifiedPiglinEntity.createZombifiedPiglinAttributes().build()).build();
+   private static final Map<EntityType<? extends LivingEntity>, DefaultAttributeContainer> FORGE_ATTRIBUTES = new java.util.HashMap<EntityType<? extends LivingEntity>, DefaultAttributeContainer>();
+   
+   public static DefaultAttributeContainer put(EntityType<? extends LivingEntity> type, DefaultAttributeContainer map) {
+       return FORGE_ATTRIBUTES.put(type, map);
+   }
 
    public static DefaultAttributeContainer get(EntityType<? extends LivingEntity> livingEntity) {
-      return DEFAULT_ATTRIBUTE_REGISTRY.get(livingEntity);
+       DefaultAttributeContainer map = FORGE_ATTRIBUTES.get(livingEntity);
+       return map != null ? map : DEFAULT_ATTRIBUTE_REGISTRY.get(livingEntity);
    }
 
    public static boolean hasDefinitionFor(EntityType<?> entityType) {
-      return DEFAULT_ATTRIBUTE_REGISTRY.containsKey(entityType);
+      return DEFAULT_ATTRIBUTE_REGISTRY.containsKey(entityType) || FORGE_ATTRIBUTES.containsKey(entityType);
    }
 
    public static void checkMissing() {
