--- a/net/minecraft/entity/passive/SheepEntity.java
+++ b/net/minecraft/entity/passive/SheepEntity.java
@@ -62,7 +62,7 @@
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
 
-public class SheepEntity extends AnimalEntity implements Shearable {
+public class SheepEntity extends AnimalEntity implements Shearable, net.minecraftforge.common.IForgeShearable {
    private static final TrackedData<Byte> COLOR = DataTracker.registerData(SheepEntity.class, TrackedDataHandlerRegistry.BYTE);
    private static final Map<DyeColor, ItemConvertible> DROPS = Util.make(Maps.newEnumMap(DyeColor.class), (p_203402_0_) -> {
       p_203402_0_.put(DyeColor.WHITE, Blocks.WHITE_WOOL);
@@ -217,7 +217,7 @@
 
    public ActionResult interactMob(PlayerEntity p_230254_1_, Hand p_230254_2_) {
       ItemStack itemstack = p_230254_1_.getStackInHand(p_230254_2_);
-      if (itemstack.getItem() == Items.SHEARS) {
+      if (false && itemstack.getItem() == Items.SHEARS) { //Forge: Moved to onSheared
          if (!this.world.isClient && this.isShearable()) {
             this.sheared(SoundCategory.PLAYERS);
             itemstack.damage(1, p_230254_1_, (p_213613_1_) -> {
@@ -362,4 +362,26 @@
    protected float getActiveEyeHeight(EntityPose poseIn, EntityDimensions sizeIn) {
       return 0.95F * sizeIn.height;
    }
+
+   @Override
+   public boolean isShearable(@javax.annotation.Nonnull ItemStack item, World world, BlockPos pos) {
+      return isShearable();
+   }
+
+   @javax.annotation.Nonnull
+   @Override
+   public java.util.List<ItemStack> onSheared(@Nullable PlayerEntity player, @javax.annotation.Nonnull ItemStack item, World world, BlockPos pos, int fortune) {
+      world.playSoundFromEntity(null, this, SoundEvents.ENTITY_SHEEP_SHEAR, player == null ? SoundCategory.BLOCKS : SoundCategory.PLAYERS, 1.0F, 1.0F);
+      if (!world.isClient) {
+         this.setSheared(true);
+         int i = 1 + this.random.nextInt(3);
+
+         java.util.List<ItemStack> items = new java.util.ArrayList<>();
+         for (int j = 0; j < i; ++j) {
+            items.add(new ItemStack(DROPS.get(this.getColor())));
+         }
+         return items;
+      }
+      return java.util.Collections.emptyList();
+   }
 }
