--- a/net/minecraft/entity/player/PlayerEntity.java
+++ b/net/minecraft/entity/player/PlayerEntity.java
@@ -112,6 +112,7 @@
 import net.minecraftforge.api.distmarker.OnlyIn;
 
 public abstract class PlayerEntity extends LivingEntity {
+   public static final String PERSISTED_NBT_TAG = "PlayerPersisted";
    public static final EntityDimensions STANDING_DIMENSIONS = EntityDimensions.changing(0.6F, 1.8F);
    private static final Map<EntityPose, EntityDimensions> POSE_DIMENSIONS = ImmutableMap.<EntityPose, EntityDimensions>builder().put(EntityPose.STANDING, STANDING_DIMENSIONS).put(EntityPose.SLEEPING, SLEEPING_DIMENSIONS).put(EntityPose.FALL_FLYING, EntityDimensions.changing(0.6F, 0.6F)).put(EntityPose.SWIMMING, EntityDimensions.changing(0.6F, 0.6F)).put(EntityPose.SPIN_ATTACK, EntityDimensions.changing(0.6F, 0.6F)).put(EntityPose.CROUCHING, EntityDimensions.changing(0.6F, 1.5F)).put(EntityPose.DYING, EntityDimensions.fixed(0.2F, 0.2F)).build();
    private static final TrackedData<Float> ABSORPTION_AMOUNT = DataTracker.registerData(PlayerEntity.class, TrackedDataHandlerRegistry.FLOAT);
@@ -152,6 +153,9 @@
    private final ItemCooldownManager itemCooldownManager = this.createCooldownManager();
    @Nullable
    public FishingBobberEntity fishHook;
+   private final java.util.Collection<MutableText> prefixes = new java.util.LinkedList<>();
+   private final java.util.Collection<MutableText> suffixes = new java.util.LinkedList<>();
+   @Nullable private EntityPose forcedPose;
 
    public PlayerEntity(World p_i241920_1_, BlockPos p_i241920_2_, float p_i241920_3_, GameProfile p_i241920_4_) {
       super(EntityType.PLAYER, p_i241920_1_);
@@ -177,7 +181,7 @@
    }
 
    public static DefaultAttributeContainer.Builder createPlayerAttributes() {
-      return LivingEntity.createLivingAttributes().add(EntityAttributes.GENERIC_ATTACK_DAMAGE, 1.0D).add(EntityAttributes.GENERIC_MOVEMENT_SPEED, (double)0.1F).add(EntityAttributes.GENERIC_ATTACK_SPEED).add(EntityAttributes.GENERIC_LUCK);
+      return LivingEntity.createLivingAttributes().add(EntityAttributes.GENERIC_ATTACK_DAMAGE, 1.0D).add(EntityAttributes.GENERIC_MOVEMENT_SPEED, (double)0.1F).add(EntityAttributes.GENERIC_ATTACK_SPEED).add(EntityAttributes.GENERIC_LUCK).add(net.minecraftforge.common.ForgeMod.REACH_DISTANCE.get());
    }
 
    protected void initDataTracker() {
@@ -191,6 +195,7 @@
    }
 
    public void tick() {
+      net.minecraftforge.fml.hooks.BasicEventHooks.onPlayerPreTick(this);
       this.noClip = this.isSpectator();
       if (this.isSpectator()) {
          this.onGround = false;
@@ -206,7 +211,7 @@
             this.sleepTimer = 100;
          }
 
-         if (!this.world.isClient && this.world.isDay()) {
+         if (!this.world.isClient && !net.minecraftforge.event.ForgeEventFactory.fireSleepingTimeCheck(this, getSleepingPosition())) {
             this.wakeUp(false, true);
          }
       } else if (this.sleepTimer > 0) {
@@ -260,6 +265,7 @@
       this.updateTurtleHelmet();
       this.itemCooldownManager.update();
       this.updateSize();
+      net.minecraftforge.fml.hooks.BasicEventHooks.onPlayerPostTick(this);
    }
 
    public boolean shouldCancelInteraction() {
@@ -335,6 +341,10 @@
    }
 
    protected void updateSize() {
+      if(forcedPose != null) {
+         this.setPose(forcedPose);
+         return;
+      }
       if (this.wouldPoseNotCollide(EntityPose.SWIMMING)) {
          EntityPose pose;
          if (this.isFallFlying()) {
@@ -552,6 +562,7 @@
    }
 
    public void onDeath(DamageSource cause) {
+      if (net.minecraftforge.common.ForgeHooks.onLivingDeath(this,  cause)) return;
       super.onDeath(cause);
       this.refreshPosition();
       if (!this.isSpectator()) {
@@ -605,12 +616,14 @@
    }
 
    public boolean dropSelectedItem(boolean p_225609_1_) {
-      return this.dropItem(this.inventory.removeStack(this.inventory.selectedSlot, p_225609_1_ && !this.inventory.getMainHandStack().isEmpty() ? this.inventory.getMainHandStack().getCount() : 1), false, true) != null;
+      ItemStack stack = inventory.getMainHandStack();
+      if (stack.isEmpty() || !stack.onDroppedByPlayer(this)) return false;
+      return net.minecraftforge.common.ForgeHooks.onPlayerTossEvent(this, this.inventory.removeStack(this.inventory.selectedSlot, p_225609_1_ && !this.inventory.getMainHandStack().isEmpty() ? this.inventory.getMainHandStack().getCount() : 1), true) != null;
    }
 
    @Nullable
    public ItemEntity dropItem(ItemStack itemStackIn, boolean unused) {
-      return this.dropItem(itemStackIn, false, unused);
+      return net.minecraftforge.common.ForgeHooks.onPlayerTossEvent(this, itemStackIn, false);
    }
 
    @Nullable
@@ -648,7 +661,12 @@
       }
    }
 
+   @Deprecated //Use location sensitive version below
    public float getBlockBreakingSpeed(BlockState state) {
+      return getDigSpeed(state, null);
+   }
+
+   public float getDigSpeed(BlockState state, @Nullable BlockPos pos) {
       float f = this.inventory.getBlockBreakingSpeed(state);
       if (f > 1.0F) {
          int i = EnchantmentHelper.getEfficiency(this);
@@ -690,11 +708,12 @@
          f /= 5.0F;
       }
 
+      f = net.minecraftforge.event.ForgeEventFactory.getBreakSpeed(this, state, f, pos);
       return f;
    }
 
    public boolean isUsingEffectiveTool(BlockState p_234569_1_) {
-      return !p_234569_1_.isToolRequired() || this.inventory.getMainHandStack().isEffectiveOn(p_234569_1_);
+      return net.minecraftforge.event.ForgeEventFactory.doPlayerHarvestCheck(this, p_234569_1_, !p_234569_1_.isToolRequired() || this.inventory.getMainHandStack().isEffectiveOn(p_234569_1_));
    }
 
    public void readCustomDataFromTag(CompoundTag compound) {
@@ -769,6 +788,7 @@
    }
 
    public boolean damage(DamageSource source, float amount) {
+      if (!net.minecraftforge.common.ForgeHooks.onPlayerAttack(this, source, amount)) return false;
       if (this.isInvulnerableTo(source)) {
          return false;
       } else if (this.abilities.invulnerable && !source.isOutOfWorld()) {
@@ -800,7 +820,7 @@
 
    protected void takeShieldHit(LivingEntity entityIn) {
       super.takeShieldHit(entityIn);
-      if (entityIn.getMainHandStack().getItem() instanceof AxeItem) {
+      if (entityIn.getMainHandStack().canDisableShield(this.activeItemStack, this, entityIn)) {
          this.disableShield(true);
       }
 
@@ -821,7 +841,7 @@
    }
 
    protected void damageShield(float damage) {
-      if (this.activeItemStack.getItem() == Items.SHIELD) {
+      if (this.activeItemStack.isShield(this)) {
          if (!this.world.isClient) {
             this.incrementStat(Stats.USED.getOrCreateStat(this.activeItemStack.getItem()));
          }
@@ -831,6 +851,7 @@
             Hand hand = this.getActiveHand();
             this.activeItemStack.damage(i, this, (p_213833_1_) -> {
                p_213833_1_.sendToolBreakStatus(hand);
+               net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem(this, this.activeItemStack, hand);
             });
             if (this.activeItemStack.isEmpty()) {
                if (hand == Hand.MAIN_HAND) {
@@ -849,10 +870,13 @@
 
    protected void applyDamage(DamageSource damageSrc, float damageAmount) {
       if (!this.isInvulnerableTo(damageSrc)) {
+         damageAmount = net.minecraftforge.common.ForgeHooks.onLivingHurt(this, damageSrc, damageAmount);
+         if (damageAmount <= 0) return;
          damageAmount = this.applyArmorToDamage(damageSrc, damageAmount);
          damageAmount = this.applyEnchantmentsToDamage(damageSrc, damageAmount);
          float f2 = Math.max(damageAmount - this.getAbsorptionAmount(), 0.0F);
          this.setAbsorptionAmount(this.getAbsorptionAmount() - (damageAmount - f2));
+         f2 = net.minecraftforge.common.ForgeHooks.onLivingDamage(this, damageSrc, f2);
          float f = damageAmount - f2;
          if (f > 0.0F && f < 3.4028235E37F) {
             this.increaseStat(Stats.DAMAGE_ABSORBED, Math.round(f * 10.0F));
@@ -911,6 +935,8 @@
 
          return ActionResult.PASS;
       } else {
+         ActionResult cancelResult = net.minecraftforge.common.ForgeHooks.onInteractEntity(this, entityToInteractOn, hand);
+         if (cancelResult != null) return cancelResult;
          ItemStack itemstack = this.getStackInHand(hand);
          ItemStack itemstack1 = itemstack.copy();
          ActionResult actionresulttype = entityToInteractOn.interact(this, hand);
@@ -919,6 +945,9 @@
                itemstack.setCount(itemstack1.getCount());
             }
 
+            if (!this.abilities.creativeMode && itemstack.isEmpty()) {
+               net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem(this, itemstack1, hand);
+            }
             return actionresulttype;
          } else {
             if (!itemstack.isEmpty() && entityToInteractOn instanceof LivingEntity) {
@@ -929,6 +958,7 @@
                ActionResult actionresulttype1 = itemstack.useOnEntity(this, (LivingEntity)entityToInteractOn, hand);
                if (actionresulttype1.isAccepted()) {
                   if (itemstack.isEmpty() && !this.abilities.creativeMode) {
+                     net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem(this, itemstack1, hand);
                      this.setStackInHand(hand, ItemStack.EMPTY);
                   }
 
@@ -1013,6 +1043,7 @@
    }
 
    public void attack(Entity targetEntity) {
+      if (!net.minecraftforge.common.ForgeHooks.onPlayerAttackTarget(this, targetEntity)) return;
       if (targetEntity.isAttackable()) {
          if (!targetEntity.handleAttack(this)) {
             float f = (float)this.getAttributeValue(EntityAttributes.GENERIC_ATTACK_DAMAGE);
@@ -1040,8 +1071,10 @@
 
                boolean flag2 = flag && this.fallDistance > 0.0F && !this.onGround && !this.isClimbing() && !this.isTouchingWater() && !this.hasStatusEffect(StatusEffects.BLINDNESS) && !this.hasVehicle() && targetEntity instanceof LivingEntity;
                flag2 = flag2 && !this.isSprinting();
+               net.minecraftforge.event.entity.player.CriticalHitEvent hitResult = net.minecraftforge.common.ForgeHooks.getCriticalHit(this, targetEntity, flag2, flag2 ? 1.5F : 1.0F);
+               flag2 = hitResult != null;
                if (flag2) {
-                  f *= 1.5F;
+                  f *= hitResult.getDamageModifier();
                }
 
                f = f + f1;
@@ -1129,8 +1162,10 @@
                   }
 
                   if (!this.world.isClient && !itemstack1.isEmpty() && entity instanceof LivingEntity) {
+                     ItemStack copy = itemstack1.copy();
                      itemstack1.postHit((LivingEntity)entity, this);
                      if (itemstack1.isEmpty()) {
+                        net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem(this, copy, Hand.MAIN_HAND);
                         this.setStackInHand(Hand.MAIN_HAND, ItemStack.EMPTY);
                      }
                   }
@@ -1172,7 +1207,7 @@
       }
 
       if (this.random.nextFloat() < f) {
-         this.getItemCooldownManager().set(Items.SHIELD, 100);
+         this.getItemCooldownManager().set(this.getActiveItem().getItem(), 100);
          this.clearActiveItem();
          this.world.sendEntityStatus(this, (byte)30);
       }
@@ -1198,8 +1233,9 @@
    public void requestRespawn() {
    }
 
-   public void remove() {
-      super.remove();
+   @Override
+   public void remove(boolean keepData) {
+      super.remove(keepData);
       this.playerScreenHandler.close(this);
       if (this.currentScreenHandler != null) {
          this.currentScreenHandler.close(this);
@@ -1222,6 +1258,7 @@
    }
 
    public void wakeUp(boolean p_225652_1_, boolean p_225652_2_) {
+      net.minecraftforge.event.ForgeEventFactory.onPlayerWakeup(this, p_225652_1_, p_225652_2_);
       super.wakeUp();
       if (this.world instanceof ServerWorld && p_225652_2_) {
          ((ServerWorld)this.world).updateSleepingPlayers();
@@ -1244,8 +1281,8 @@
          }
 
          return optional;
-      } else if (block instanceof BedBlock && BedBlock.isOverworld(p_242374_0_)) {
-         return BedBlock.findWakeUpPosition(EntityType.PLAYER, p_242374_0_, p_242374_1_, p_242374_2_);
+      } else if (blockstate.isBed(p_242374_0_, p_242374_1_, null) && BedBlock.isOverworld(p_242374_0_)) {
+         return blockstate.getBedSpawnPosition(EntityType.PLAYER, p_242374_0_, p_242374_1_, p_242374_2_, null);
       } else if (!p_242374_3_) {
          return Optional.empty();
       } else {
@@ -1427,6 +1464,7 @@
 
    public boolean handleFallDamage(float distance, float damageMultiplier) {
       if (this.abilities.allowFlying) {
+         net.minecraftforge.event.ForgeEventFactory.onPlayerFall(this, distance, damageMultiplier);
          return false;
       } else {
          if (distance >= 2.0F) {
@@ -1440,7 +1478,7 @@
    public boolean checkFallFlying() {
       if (!this.onGround && !this.isFallFlying() && !this.isTouchingWater() && !this.hasStatusEffect(StatusEffects.LEVITATION)) {
          ItemStack itemstack = this.getEquippedStack(EquipmentSlot.CHEST);
-         if (itemstack.getItem() == Items.ELYTRA && ElytraItem.isUsable(itemstack)) {
+         if (itemstack.canElytraFly(this)) {
             this.startFallFlying();
             return true;
          }
@@ -1481,6 +1519,10 @@
    }
 
    public void addExperience(int p_195068_1_) {
+      net.minecraftforge.event.entity.player.PlayerXpEvent.XpChange event = new net.minecraftforge.event.entity.player.PlayerXpEvent.XpChange(this, p_195068_1_);
+      if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event)) return;
+      p_195068_1_ = event.getAmount();
+
       this.addScore(p_195068_1_);
       this.experienceProgress += (float)p_195068_1_ / (float)this.getNextLevelExperience();
       this.totalExperience = MathHelper.clamp(this.totalExperience + p_195068_1_, 0, Integer.MAX_VALUE);
@@ -1509,7 +1551,7 @@
    }
 
    public void applyEnchantmentCosts(ItemStack enchantedItem, int cost) {
-      this.experienceLevel -= cost;
+      addExperienceLevels(-cost);
       if (this.experienceLevel < 0) {
          this.experienceLevel = 0;
          this.experienceProgress = 0.0F;
@@ -1520,6 +1562,10 @@
    }
 
    public void addExperienceLevels(int levels) {
+      net.minecraftforge.event.entity.player.PlayerXpEvent.LevelChange event = new net.minecraftforge.event.entity.player.PlayerXpEvent.LevelChange(this, levels);
+      if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event)) return;
+      levels = event.getLevels();
+
       this.experienceLevel += levels;
       if (this.experienceLevel < 0) {
          this.experienceLevel = 0;
@@ -1710,7 +1756,11 @@
    }
 
    public Text getDisplayName() {
-      MutableText iformattabletextcomponent = Team.modifyText(this.getScoreboardTeam(), this.getName());
+      if (this.displayname == null) this.displayname = net.minecraftforge.event.ForgeEventFactory.getPlayerDisplayName(this, this.getName());
+      MutableText iformattabletextcomponent = new LiteralText("");
+      iformattabletextcomponent = prefixes.stream().reduce(iformattabletextcomponent, MutableText::append);
+      iformattabletextcomponent = iformattabletextcomponent.append(Team.modifyText(this.getScoreboardTeam(), this.displayname));
+      iformattabletextcomponent = suffixes.stream().reduce(iformattabletextcomponent, MutableText::append);
       return this.addTellClickEvent(iformattabletextcomponent);
    }
 
@@ -1989,4 +2039,62 @@
          return this.text;
       }
    }
+
+   // =========== FORGE START ==============//
+   public Collection<MutableText> getPrefixes() {
+       return this.prefixes;
+   }
+
+   public Collection<MutableText> getSuffixes() {
+       return this.suffixes;
+   }
+
+   private Text displayname = null;
+   /**
+    * Force the displayed name to refresh, by firing {@link net.minecraftforge.event.entity.player.PlayerEvent.NameFormat}, using the real player name as event parameter.
+    */
+   public void refreshDisplayName() {
+      this.displayname = net.minecraftforge.event.ForgeEventFactory.getPlayerDisplayName(this, this.getName());
+   }
+
+   private final net.minecraftforge.common.util.LazyOptional<net.minecraftforge.items.IItemHandler>
+         playerMainHandler = net.minecraftforge.common.util.LazyOptional.of(
+               () -> new net.minecraftforge.items.wrapper.PlayerMainInvWrapper(inventory));
+
+   private final net.minecraftforge.common.util.LazyOptional<net.minecraftforge.items.IItemHandler>
+         playerEquipmentHandler = net.minecraftforge.common.util.LazyOptional.of(
+               () -> new net.minecraftforge.items.wrapper.CombinedInvWrapper(
+                     new net.minecraftforge.items.wrapper.PlayerArmorInvWrapper(inventory),
+                     new net.minecraftforge.items.wrapper.PlayerOffhandInvWrapper(inventory)));
+
+   private final net.minecraftforge.common.util.LazyOptional<net.minecraftforge.items.IItemHandler>
+         playerJoinedHandler = net.minecraftforge.common.util.LazyOptional.of(
+               () -> new net.minecraftforge.items.wrapper.PlayerInvWrapper(inventory));
+
+   @Override
+   public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable Direction facing) {
+      if (this.isAlive() && capability == net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY) {
+         if (facing == null) return playerJoinedHandler.cast();
+         else if (facing.getAxis().isVertical()) return playerMainHandler.cast();
+         else if (facing.getAxis().isHorizontal()) return playerEquipmentHandler.cast();
+      }
+      return super.getCapability(capability, facing);
+   }
+
+   /**
+    * Force a pose for the player. If set, the vanilla pose determination and clearance check is skipped. Make sure the pose is clear yourself (e.g. in PlayerTick).
+    * This has to be set just once, do not set it every tick.
+    * Make sure to clear (null) the pose if not required anymore and only use if necessary.
+    */
+   public void setForcedPose(@Nullable EntityPose pose) {
+      this.forcedPose = pose;
+   }
+
+   /**
+    * @return The forced pose if set, null otherwise
+    */
+   @Nullable
+   public EntityPose getForcedPose() {
+      return this.forcedPose;
+   }
 }
