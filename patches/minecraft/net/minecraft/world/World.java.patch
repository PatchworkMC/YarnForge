--- a/net/minecraft/world/World.java
+++ b/net/minecraft/world/World.java
@@ -18,7 +18,6 @@
 import net.minecraft.block.BlockState;
 import net.minecraft.block.Blocks;
 import net.minecraft.block.entity.BlockEntity;
-import net.minecraft.block.entity.BlockEntityType;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityType;
 import net.minecraft.entity.damage.DamageSource;
@@ -65,7 +64,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public abstract class World implements WorldAccess, AutoCloseable {
+public abstract class World extends net.minecraftforge.common.capabilities.CapabilityProvider<World> implements WorldAccess, AutoCloseable, net.minecraftforge.common.extensions.IForgeWorld {
    protected static final Logger LOGGER = LogManager.getLogger();
    public static final Codec<RegistryKey<World>> CODEC = Identifier.CODEC.xmap(RegistryKey.createKeyFactory(Registry.DIMENSION), RegistryKey::getValue);
    public static final RegistryKey<World> OVERWORLD = RegistryKey.of(Registry.DIMENSION, new Identifier("overworld"));
@@ -75,7 +74,7 @@
    public final List<BlockEntity> blockEntities = Lists.newArrayList();
    public final List<BlockEntity> tickingBlockEntities = Lists.newArrayList();
    protected final List<BlockEntity> pendingBlockEntities = Lists.newArrayList();
-   protected final List<BlockEntity> unloadedBlockEntities = Lists.newArrayList();
+   protected final java.util.Set<BlockEntity> unloadedBlockEntities = java.util.Collections.newSetFromMap(new java.util.IdentityHashMap<>()); // Forge: faster "contains" makes removal much more efficient
    private final Thread thread;
    private final boolean debugWorld;
    private int ambientDarkness;
@@ -94,8 +93,12 @@
    private final WorldBorder border;
    private final BiomeAccess biomeAccess;
    private final RegistryKey<World> registryKey;
+   public boolean restoringBlockSnapshots = false;
+   public boolean captureBlockSnapshots = false;
+   public java.util.ArrayList<net.minecraftforge.common.util.BlockSnapshot> capturedBlockSnapshots = new java.util.ArrayList<>();
 
    protected World(MutableWorldProperties worldInfo, RegistryKey<World> dimension, final DimensionType dimensionType, Supplier<Profiler> profiler, boolean isRemote, boolean isDebug, long seed) {
+      super(World.class);
       this.profiler = profiler;
       this.properties = worldInfo;
       this.dimension = dimensionType;
@@ -182,17 +185,45 @@
       } else {
          WorldChunk chunk = this.getWorldChunk(pos);
          Block block = state.getBlock();
+
+         pos = pos.toImmutable(); // Forge - prevent mutable BlockPos leaks
+         net.minecraftforge.common.util.BlockSnapshot blockSnapshot = null;
+         if (this.captureBlockSnapshots && !this.isClient) {
+             blockSnapshot = net.minecraftforge.common.util.BlockSnapshot.create(this.registryKey, this, pos, flags);
+             this.capturedBlockSnapshots.add(blockSnapshot);
+         }
+
+         BlockState old = getBlockState(pos);
+         int oldLight = old.getLightValue(this, pos);
+         int oldOpacity = old.getOpacity(this, pos);
+
          BlockState blockstate = chunk.setBlockState(pos, state, (flags & 64) != 0);
          if (blockstate == null) {
+            if (blockSnapshot != null) this.capturedBlockSnapshots.remove(blockSnapshot);
             return false;
          } else {
             BlockState blockstate1 = this.getBlockState(pos);
-            if ((flags & 128) == 0 && blockstate1 != blockstate && (blockstate1.getOpacity(this, pos) != blockstate.getOpacity(this, pos) || blockstate1.getLuminance() != blockstate.getLuminance() || blockstate1.hasSidedTransparency() || blockstate.hasSidedTransparency())) {
+            if ((flags & 128) == 0 && blockstate1 != blockstate && (blockstate1.getOpacity(this, pos) != oldOpacity || blockstate1.getLightValue(this, pos) != oldLight || blockstate1.hasSidedTransparency() || blockstate.hasSidedTransparency())) {
                this.getProfiler().push("queueCheckLight");
                this.getChunkManager().getLightingProvider().checkBlock(pos);
                this.getProfiler().pop();
             }
 
+            if (blockSnapshot == null) { // Don't notify clients or update physics while capturing blockstates
+               this.markAndNotifyBlock(pos, chunk, blockstate, state, flags, recursionLeft);
+            }
+            return true;
+         }
+      }
+   }
+
+   // Split off from original setBlockState(BlockPos, BlockState, int, int) method in order to directly send client and physic updates
+   public void markAndNotifyBlock(BlockPos pos, @Nullable WorldChunk chunk, BlockState blockstate, BlockState state, int flags, int recursionLeft)
+   {
+       Block block = state.getBlock();
+       BlockState blockstate1 = getBlockState(pos);
+       {
+           {
             if (blockstate1 == state) {
                if (blockstate != blockstate1) {
                   this.scheduleBlockRerenderIfNeeded(pos, blockstate, blockstate1);
@@ -218,8 +249,6 @@
 
                this.onBlockChanged(pos, blockstate, blockstate1);
             }
-
-            return true;
          }
       }
    }
@@ -234,7 +263,7 @@
 
    public boolean breakBlock(BlockPos pos, boolean dropBlock, @Nullable Entity entity, int recursionLeft) {
       BlockState blockstate = this.getBlockState(pos);
-      if (blockstate.isAir()) {
+      if (blockstate.isAir(this, pos)) {
          return false;
       } else {
          FluidState fluidstate = this.getFluidState(pos);
@@ -243,7 +272,7 @@
          }
 
          if (dropBlock) {
-            BlockEntity tileentity = blockstate.getBlock().hasBlockEntity() ? this.getBlockEntity(pos) : null;
+            BlockEntity tileentity = blockstate.hasTileEntity() ? this.getBlockEntity(pos) : null;
             Block.dropStacks(blockstate, this, pos, tileentity, entity, ItemStack.EMPTY);
          }
 
@@ -261,6 +290,8 @@
    }
 
    public void updateNeighborsAlways(BlockPos pos, Block blockIn) {
+      if (net.minecraftforge.event.ForgeEventFactory.onNeighborNotify(this, pos, this.getBlockState(pos), java.util.EnumSet.allOf(Direction.class), false).isCanceled())
+         return;
       this.updateNeighbor(pos.west(), blockIn, pos);
       this.updateNeighbor(pos.east(), blockIn, pos);
       this.updateNeighbor(pos.down(), blockIn, pos);
@@ -270,6 +301,11 @@
    }
 
    public void updateNeighborsExcept(BlockPos pos, Block blockType, Direction skipSide) {
+      java.util.EnumSet<Direction> directions = java.util.EnumSet.allOf(Direction.class);
+      directions.remove(skipSide);
+      if (net.minecraftforge.event.ForgeEventFactory.onNeighborNotify(this, pos, this.getBlockState(pos), directions, false).isCanceled())
+         return;
+
       if (skipSide != Direction.WEST) {
          this.updateNeighbor(pos.west(), blockType, pos);
       }
@@ -307,9 +343,9 @@
             CrashReportSection crashreportcategory = crashreport.addElement("Block being updated");
             crashreportcategory.add("Source block type", () -> {
                try {
-                  return String.format("ID #%s (%s // %s)", Registry.BLOCK.getId(blockIn), blockIn.getTranslationKey(), blockIn.getClass().getCanonicalName());
+                  return String.format("ID #%s (%s // %s)", blockIn.getRegistryName(), blockIn.getTranslationKey(), blockIn.getClass().getCanonicalName());
                } catch (Throwable throwable1) {
-                  return "ID #" + Registry.BLOCK.getId(blockIn);
+                  return "ID #" + blockIn.getRegistryName();
                }
             });
             CrashReportSection.addBlockInfo(crashreportcategory, pos, blockstate);
@@ -393,10 +429,12 @@
    }
 
    public boolean addBlockEntity(BlockEntity tile) {
+      if (tile.getWorld() != this) tile.setLocation(this, tile.getPos()); // Forge - set the world early as vanilla doesn't set it until next tick
       if (this.iteratingTickingBlockEntities) {
          LOGGER.error("Adding block entity while ticking: {} @ {}", () -> {
             return Registry.BLOCK_ENTITY_TYPE.getId(tile.getType());
          }, tile::getPos);
+         return pendingBlockEntities.add(tile); // Forge: wait to add new TE if we're currently processing existing ones
       }
 
       boolean flag = this.blockEntities.add(tile);
@@ -404,6 +442,8 @@
          this.tickingBlockEntities.add(tile);
       }
 
+      tile.onLoad();
+
       if (this.isClient) {
          BlockPos blockpos = tile.getPos();
          BlockState blockstate = this.getBlockState(blockpos);
@@ -415,6 +455,7 @@
 
    public void addBlockEntities(Collection<BlockEntity> tileEntityCollection) {
       if (this.iteratingTickingBlockEntities) {
+         tileEntityCollection.stream().filter(te -> te.getWorld() != this).forEach(te -> te.setLocation(this, te.getPos())); // Forge - set the world early as vanilla doesn't set it until next tick
          this.pendingBlockEntities.addAll(tileEntityCollection);
       } else {
          for(BlockEntity tileentity : tileEntityCollection) {
@@ -427,13 +468,14 @@
    public void tickBlockEntities() {
       Profiler iprofiler = this.getProfiler();
       iprofiler.push("blockEntities");
+      this.iteratingTickingBlockEntities = true;// Forge: Move above remove to prevent CMEs
       if (!this.unloadedBlockEntities.isEmpty()) {
+         this.unloadedBlockEntities.forEach(e -> e.onChunkUnloaded());
          this.tickingBlockEntities.removeAll(this.unloadedBlockEntities);
          this.blockEntities.removeAll(this.unloadedBlockEntities);
          this.unloadedBlockEntities.clear();
       }
 
-      this.iteratingTickingBlockEntities = true;
       Iterator<BlockEntity> iterator = this.tickingBlockEntities.iterator();
 
       while(iterator.hasNext()) {
@@ -442,8 +484,9 @@
             BlockPos blockpos = tileentity.getPos();
             if (this.getChunkManager().shouldTickBlock(blockpos) && this.getWorldBorder().contains(blockpos)) {
                try {
+                  net.minecraftforge.server.timings.TimeTracker.TILE_ENTITY_UPDATE.trackStart(tileentity);
                   iprofiler.push(() -> {
-                     return String.valueOf((Object)BlockEntityType.getId(tileentity.getType()));
+                     return String.valueOf(tileentity.getType().getRegistryName());
                   });
                   if (tileentity.getType().supports(this.getBlockState(blockpos).getBlock())) {
                      ((Tickable)tileentity).tick();
@@ -456,8 +499,16 @@
                   CrashReport crashreport = CrashReport.create(throwable, "Ticking block entity");
                   CrashReportSection crashreportcategory = crashreport.addElement("Block entity being ticked");
                   tileentity.populateCrashReport(crashreportcategory);
+                  if (net.minecraftforge.common.ForgeConfig.SERVER.removeErroringTileEntities.get()) {
+                     LogManager.getLogger().fatal("{}", crashreport.asString());
+                     tileentity.markRemoved();
+                     this.removeBlockEntity(tileentity.getPos());
+                  } else
                   throw new CrashException(crashreport);
                }
+               finally {
+                  net.minecraftforge.server.timings.TimeTracker.TILE_ENTITY_UPDATE.trackEnd(tileentity);
+               }
             }
          }
 
@@ -465,7 +516,10 @@
             iterator.remove();
             this.blockEntities.remove(tileentity);
             if (this.isChunkLoaded(tileentity.getPos())) {
-               this.getWorldChunk(tileentity.getPos()).removeBlockEntity(tileentity.getPos());
+               //Forge: Bugfix: If we set the tile entity it immediately sets it in the chunk, so we could be desyned
+               WorldChunk chunk = this.getWorldChunk(tileentity.getPos());
+               if (chunk.getBlockEntity(tileentity.getPos(), WorldChunk.CreationType.CHECK) == tileentity)
+                  chunk.removeBlockEntity(tileentity.getPos());
             }
          }
       }
@@ -497,12 +551,15 @@
 
    public void tickEntity(Consumer<Entity> consumerEntity, Entity entityIn) {
       try {
+         net.minecraftforge.server.timings.TimeTracker.ENTITY_UPDATE.trackStart(entityIn);
          consumerEntity.accept(entityIn);
       } catch (Throwable throwable) {
          CrashReport crashreport = CrashReport.create(throwable, "Ticking entity");
          CrashReportSection crashreportcategory = crashreport.addElement("Entity being ticked");
          entityIn.populateCrashReport(crashreportcategory);
          throw new CrashException(crashreport);
+      } finally {
+         net.minecraftforge.server.timings.TimeTracker.ENTITY_UPDATE.trackEnd(entityIn);
       }
    }
 
@@ -516,6 +573,7 @@
 
    public Explosion createExplosion(@Nullable Entity exploder, @Nullable DamageSource damageSource, @Nullable ExplosionBehavior context, double x, double y, double z, float size, boolean causesFire, Explosion.DestructionType mode) {
       Explosion explosion = new Explosion(this, exploder, damageSource, context, x, y, z, size, causesFire, mode);
+      if (net.minecraftforge.event.ForgeEventFactory.onExplosionStart(this, explosion)) return explosion;
       explosion.collectBlocksAndDamageEntities();
       explosion.affectWorld(true);
       return explosion;
@@ -563,6 +621,7 @@
 
    public void setBlockEntity(BlockPos pos, @Nullable BlockEntity tileEntityIn) {
       if (!isOutOfBuildLimitVertically(pos)) {
+         pos = pos.toImmutable(); // Forge - prevent mutable BlockPos leaks
          if (tileEntityIn != null && !tileEntityIn.isRemoved()) {
             if (this.iteratingTickingBlockEntities) {
                tileEntityIn.setLocation(this, pos);
@@ -578,7 +637,8 @@
 
                this.pendingBlockEntities.add(tileEntityIn);
             } else {
-               this.getWorldChunk(pos).setBlockEntity(pos, tileEntityIn);
+               WorldChunk chunk = this.getWorldChunk(pos);
+               if (chunk != null) chunk.setBlockEntity(pos, tileEntityIn);
                this.addBlockEntity(tileEntityIn);
             }
          }
@@ -591,6 +651,8 @@
       if (tileentity != null && this.iteratingTickingBlockEntities) {
          tileentity.markRemoved();
          this.pendingBlockEntities.remove(tileentity);
+         if (!(tileentity instanceof Tickable)) //Forge: If they are not tickable they wont be removed in the update loop.
+            this.blockEntities.remove(tileentity);
       } else {
          if (tileentity != null) {
             this.pendingBlockEntities.remove(tileentity);
@@ -600,7 +662,7 @@
 
          this.getWorldChunk(pos).removeBlockEntity(pos);
       }
-
+      this.updateComparators(pos, getBlockState(pos).getBlock()); //Notify neighbors of changes
    }
 
    public boolean canSetBlock(BlockPos pos) {
@@ -653,10 +715,10 @@
    public List<Entity> getOtherEntities(@Nullable Entity entityIn, Box boundingBox, @Nullable Predicate<? super Entity> predicate) {
       this.getProfiler().visit("getEntities");
       List<Entity> list = Lists.newArrayList();
-      int i = MathHelper.floor((boundingBox.minX - 2.0D) / 16.0D);
-      int j = MathHelper.floor((boundingBox.maxX + 2.0D) / 16.0D);
-      int k = MathHelper.floor((boundingBox.minZ - 2.0D) / 16.0D);
-      int l = MathHelper.floor((boundingBox.maxZ + 2.0D) / 16.0D);
+      int i = MathHelper.floor((boundingBox.minX - getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.floor((boundingBox.maxX + getMaxEntityRadius()) / 16.0D);
+      int k = MathHelper.floor((boundingBox.minZ - getMaxEntityRadius()) / 16.0D);
+      int l = MathHelper.floor((boundingBox.maxZ + getMaxEntityRadius()) / 16.0D);
       ChunkManager abstractchunkprovider = this.getChunkManager();
 
       for(int i1 = i; i1 <= j; ++i1) {
@@ -673,10 +735,10 @@
 
    public <T extends Entity> List<T> getEntitiesByType(@Nullable EntityType<T> type, Box boundingBox, Predicate<? super T> predicate) {
       this.getProfiler().visit("getEntities");
-      int i = MathHelper.floor((boundingBox.minX - 2.0D) / 16.0D);
-      int j = MathHelper.ceil((boundingBox.maxX + 2.0D) / 16.0D);
-      int k = MathHelper.floor((boundingBox.minZ - 2.0D) / 16.0D);
-      int l = MathHelper.ceil((boundingBox.maxZ + 2.0D) / 16.0D);
+      int i = MathHelper.floor((boundingBox.minX - getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.ceil((boundingBox.maxX + getMaxEntityRadius()) / 16.0D);
+      int k = MathHelper.floor((boundingBox.minZ - getMaxEntityRadius()) / 16.0D);
+      int l = MathHelper.ceil((boundingBox.maxZ + getMaxEntityRadius()) / 16.0D);
       List<T> list = Lists.newArrayList();
 
       for(int i1 = i; i1 < j; ++i1) {
@@ -693,10 +755,10 @@
 
    public <T extends Entity> List<T> getEntitiesByClass(Class<? extends T> clazz, Box aabb, @Nullable Predicate<? super T> filter) {
       this.getProfiler().visit("getEntities");
-      int i = MathHelper.floor((aabb.minX - 2.0D) / 16.0D);
-      int j = MathHelper.ceil((aabb.maxX + 2.0D) / 16.0D);
-      int k = MathHelper.floor((aabb.minZ - 2.0D) / 16.0D);
-      int l = MathHelper.ceil((aabb.maxZ + 2.0D) / 16.0D);
+      int i = MathHelper.floor((aabb.minX - getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.ceil((aabb.maxX + getMaxEntityRadius()) / 16.0D);
+      int k = MathHelper.floor((aabb.minZ - getMaxEntityRadius()) / 16.0D);
+      int l = MathHelper.ceil((aabb.maxZ + getMaxEntityRadius()) / 16.0D);
       List<T> list = Lists.newArrayList();
       ChunkManager abstractchunkprovider = this.getChunkManager();
 
@@ -714,10 +776,10 @@
 
    public <T extends Entity> List<T> getEntitiesIncludingUngeneratedChunks(Class<? extends T> p_225316_1_, Box p_225316_2_, @Nullable Predicate<? super T> p_225316_3_) {
       this.getProfiler().visit("getLoadedEntities");
-      int i = MathHelper.floor((p_225316_2_.minX - 2.0D) / 16.0D);
-      int j = MathHelper.ceil((p_225316_2_.maxX + 2.0D) / 16.0D);
-      int k = MathHelper.floor((p_225316_2_.minZ - 2.0D) / 16.0D);
-      int l = MathHelper.ceil((p_225316_2_.maxZ + 2.0D) / 16.0D);
+      int i = MathHelper.floor((p_225316_2_.minX - getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.ceil((p_225316_2_.maxX + getMaxEntityRadius()) / 16.0D);
+      int k = MathHelper.floor((p_225316_2_.minZ - getMaxEntityRadius()) / 16.0D);
+      int l = MathHelper.ceil((p_225316_2_.maxZ + getMaxEntityRadius()) / 16.0D);
       List<T> list = Lists.newArrayList();
       ChunkManager abstractchunkprovider = this.getChunkManager();
 
@@ -741,6 +803,7 @@
          this.getWorldChunk(pos).markDirty();
       }
 
+      this.updateComparators(pos, getBlockState(pos).getBlock()); //Notify neighbors of changes
    }
 
    public int getSeaLevel() {
@@ -785,7 +848,7 @@
    public int getEmittedRedstonePower(BlockPos pos, Direction facing) {
       BlockState blockstate = this.getBlockState(pos);
       int i = blockstate.getWeakRedstonePower(this, pos, facing);
-      return blockstate.isSolidBlock(this, pos) ? Math.max(i, this.getReceivedStrongRedstonePower(pos)) : i;
+      return blockstate.shouldCheckWeakPower(this, pos, facing) ? Math.max(i, this.getReceivedStrongRedstonePower(pos)) : i;
    }
 
    public boolean isReceivingRedstonePower(BlockPos pos) {
@@ -940,16 +1003,15 @@
    public abstract Scoreboard getScoreboard();
 
    public void updateComparators(BlockPos pos, Block blockIn) {
-      for(Direction direction : Direction.Type.HORIZONTAL) {
+      for(Direction direction : Direction.values()) {
          BlockPos blockpos = pos.offset(direction);
          if (this.isChunkLoaded(blockpos)) {
             BlockState blockstate = this.getBlockState(blockpos);
-            if (blockstate.isOf(Blocks.COMPARATOR)) {
-               blockstate.neighborUpdate(this, blockpos, blockIn, pos, false);
-            } else if (blockstate.isSolidBlock(this, blockpos)) {
+            blockstate.onNeighborChange(this, blockpos, pos);
+            if (blockstate.isSolidBlock(this, blockpos)) {
                blockpos = blockpos.offset(direction);
                blockstate = this.getBlockState(blockpos);
-               if (blockstate.isOf(Blocks.COMPARATOR)) {
+               if (blockstate.getWeakChanges(this, blockpos)) {
                   blockstate.neighborUpdate(this, blockpos, blockIn, pos, false);
                }
             }
@@ -1026,6 +1088,18 @@
       return this.biomeAccess;
    }
 
+   private double maxEntityRadius = 2.0D;
+   @Override
+   public double getMaxEntityRadius() {
+      return maxEntityRadius;
+   }
+   @Override
+   public double increaseMaxEntityRadius(double value) {
+      if (value > maxEntityRadius)
+         maxEntityRadius = value;
+      return maxEntityRadius;
+   }
+
    public final boolean isDebugWorld() {
       return this.debugWorld;
    }
