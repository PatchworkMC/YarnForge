--- a/net/minecraft/world/explosion/Explosion.java
+++ b/net/minecraft/world/explosion/Explosion.java
@@ -61,6 +61,7 @@
    private final ExplosionBehavior behavior;
    private final List<BlockPos> affectedBlocks = Lists.newArrayList();
    private final Map<PlayerEntity, Vec3d> affectedPlayers = Maps.newHashMap();
+   private final Vec3d position;
 
    @Environment(EnvType.CLIENT)
    public Explosion(World worldIn, @Nullable Entity entityIn, double x, double y, double z, float size, List<BlockPos> affectedPositions) {
@@ -89,6 +90,7 @@
       this.destructionType = mode;
       this.damageSource = source == null ? DamageSource.explosion(this) : source;
       this.behavior = context == null ? this.chooseBehavior(exploder) : context;
+      this.position = new Vec3d(this.x, this.y, this.z);
    }
 
    private ExplosionBehavior chooseBehavior(@Nullable Entity entity) {
@@ -179,6 +181,7 @@
       int j2 = MathHelper.floor(this.z - (double)f2 - 1.0D);
       int j1 = MathHelper.floor(this.z + (double)f2 + 1.0D);
       List<Entity> list = this.world.getOtherEntities(this.entity, new Box((double)k1, (double)i2, (double)j2, (double)l1, (double)i1, (double)j1));
+      net.minecraftforge.event.ForgeEventFactory.onExplosionDetonate(this.world, this, list, f2);
       Vec3d vector3d = new Vec3d(this.x, this.y, this.z);
 
       for(int k2 = 0; k2 < list.size(); ++k2) {
@@ -237,11 +240,11 @@
          for(BlockPos blockpos : this.affectedBlocks) {
             BlockState blockstate = this.world.getBlockState(blockpos);
             Block block = blockstate.getBlock();
-            if (!blockstate.isAir()) {
+            if (!blockstate.isAir(this.world, blockpos)) {
                BlockPos blockpos1 = blockpos.toImmutable();
                this.world.getProfiler().push("explosion_blocks");
-               if (block.shouldDropItemsOnExplosion(this) && this.world instanceof ServerWorld) {
-                  BlockEntity tileentity = block.hasBlockEntity() ? this.world.getBlockEntity(blockpos) : null;
+               if (blockstate.canDropFromExplosion(this.world, blockpos, this) && this.world instanceof ServerWorld) {
+                  BlockEntity tileentity = blockstate.hasTileEntity() ? this.world.getBlockEntity(blockpos) : null;
                   LootContext.Builder lootcontext$builder = (new LootContext.Builder((ServerWorld)this.world)).random(this.world.random).parameter(LootContextParameters.ORIGIN, Vec3d.ofCenter(blockpos)).parameter(LootContextParameters.TOOL, ItemStack.EMPTY).optionalParameter(LootContextParameters.BLOCK_ENTITY, tileentity).optionalParameter(LootContextParameters.THIS_ENTITY, this.entity);
                   if (this.destructionType == Explosion.DestructionType.DESTROY) {
                      lootcontext$builder.parameter(LootContextParameters.EXPLOSION_RADIUS, this.power);
@@ -252,8 +255,7 @@
                   });
                }
 
-               this.world.setBlockState(blockpos, Blocks.AIR.getDefaultState(), 3);
-               block.onDestroyedByExplosion(this.world, blockpos, this);
+               blockstate.onBlockExploded(this.world, blockpos, this);
                this.world.getProfiler().pop();
             }
          }
@@ -327,6 +329,15 @@
       return this.affectedBlocks;
    }
 
+   public Vec3d getPosition() {
+      return this.position;
+   }
+
+   @Nullable
+   public Entity getExploder() {
+      return this.entity;
+   }
+
    public static enum DestructionType {
       NONE,
       BREAK,
