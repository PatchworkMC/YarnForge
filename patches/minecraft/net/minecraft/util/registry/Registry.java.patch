--- a/net/minecraft/util/registry/Registry.java
+++ b/net/minecraft/util/registry/Registry.java
@@ -95,6 +95,10 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+/*
+ * Attention Modders: This SHOULD NOT be used, you should use ForgeRegistries instead. As it has a cleaner modder facing API.
+ * We will be wrapping all of these in our API as necessary for syncing and management.
+ */
 public abstract class Registry<T> implements Codec<T>, Keyable, IndexedIterable<T> {
    protected static final Logger LOGGER = LogManager.getLogger();
    private static final Map<Identifier, Supplier<?>> DEFAULT_ENTRIES = Maps.newLinkedHashMap();
@@ -134,43 +138,43 @@
    public static final RegistryKey<Registry<DimensionType>> DIMENSION_TYPE_KEY = createRegistryKey("dimension_type");
    public static final RegistryKey<Registry<World>> DIMENSION = createRegistryKey("dimension");
    public static final RegistryKey<Registry<DimensionOptions>> DIMENSION_OPTIONS = createRegistryKey("dimension");
-   public static final Registry<SoundEvent> SOUND_EVENT = create(SOUND_EVENT_KEY, () -> {
+   @Deprecated public static final Registry<SoundEvent> SOUND_EVENT = forge(SOUND_EVENT_KEY, () -> {
       return SoundEvents.ENTITY_ITEM_PICKUP;
    });
-   public static final DefaultedRegistry<Fluid> FLUID = create(FLUID_KEY, "empty", () -> {
+   @Deprecated public static final DefaultedRegistry<Fluid> FLUID = forge(FLUID_KEY, "empty", () -> {
       return Fluids.EMPTY;
    });
-   public static final Registry<StatusEffect> STATUS_EFFECT = create(MOB_EFFECT_KEY, () -> {
+   @Deprecated public static final Registry<StatusEffect> STATUS_EFFECT = forge(MOB_EFFECT_KEY, () -> {
       return StatusEffects.LUCK;
    });
-   public static final DefaultedRegistry<Block> BLOCK = create(BLOCK_KEY, "air", () -> {
+   @Deprecated public static final DefaultedRegistry<Block> BLOCK = forge(BLOCK_KEY, "air", () -> {
       return Blocks.AIR;
    });
-   public static final Registry<Enchantment> ENCHANTMENT = create(ENCHANTMENT_KEY, () -> {
+   @Deprecated public static final Registry<Enchantment> ENCHANTMENT = forge(ENCHANTMENT_KEY, () -> {
       return Enchantments.FORTUNE;
    });
-   public static final DefaultedRegistry<EntityType<?>> ENTITY_TYPE = create(ENTITY_TYPE_KEY, "pig", () -> {
+   @Deprecated public static final DefaultedRegistry<EntityType<?>> ENTITY_TYPE = forge(ENTITY_TYPE_KEY, "pig", () -> {
       return EntityType.PIG;
    });
-   public static final DefaultedRegistry<Item> ITEM = create(ITEM_KEY, "air", () -> {
+   @Deprecated public static final DefaultedRegistry<Item> ITEM = forge(ITEM_KEY, "air", () -> {
       return Items.AIR;
    });
-   public static final DefaultedRegistry<Potion> POTION = create(POTION_KEY, "empty", () -> {
+   @Deprecated public static final DefaultedRegistry<Potion> POTION = forge(POTION_KEY, "empty", () -> {
       return Potions.EMPTY;
    });
-   public static final Registry<ParticleType<?>> PARTICLE_TYPE = create(PARTICLE_TYPE_KEY, () -> {
+   @Deprecated public static final Registry<ParticleType<?>> PARTICLE_TYPE = forge(PARTICLE_TYPE_KEY, () -> {
       return ParticleTypes.BLOCK;
    });
-   public static final Registry<BlockEntityType<?>> BLOCK_ENTITY_TYPE = create(BLOCK_ENTITY_TYPE_KEY, () -> {
+   @Deprecated public static final Registry<BlockEntityType<?>> BLOCK_ENTITY_TYPE = forge(BLOCK_ENTITY_TYPE_KEY, () -> {
       return BlockEntityType.FURNACE;
    });
-   public static final DefaultedRegistry<PaintingMotive> PAINTING_MOTIVE = create(MOTIVE_KEY, "kebab", () -> {
+   @Deprecated public static final DefaultedRegistry<PaintingMotive> PAINTING_MOTIVE = forge(MOTIVE_KEY, "kebab", () -> {
       return PaintingMotive.KEBAB;
    });
    public static final Registry<Identifier> CUSTOM_STAT = create(CUSTOM_STAT_KEY, () -> {
       return Stats.JUMP;
    });
-   public static final DefaultedRegistry<ChunkStatus> CHUNK_STATUS = create(CHUNK_STATUS_KEY, "empty", () -> {
+   @Deprecated public static final DefaultedRegistry<ChunkStatus> CHUNK_STATUS = forge(CHUNK_STATUS_KEY, "empty", () -> {
       return ChunkStatus.EMPTY;
    });
    public static final Registry<RuleTestType<?>> RULE_TEST = create(RULE_TEST_KEY, () -> {
@@ -179,40 +183,40 @@
    public static final Registry<PosRuleTestType<?>> POS_RULE_TEST = create(POS_RULE_TEST_KEY, () -> {
       return PosRuleTestType.ALWAYS_TRUE;
    });
-   public static final Registry<ScreenHandlerType<?>> SCREEN_HANDLER = create(MENU_KEY, () -> {
+   @Deprecated public static final Registry<ScreenHandlerType<?>> SCREEN_HANDLER = forge(MENU_KEY, () -> {
       return ScreenHandlerType.ANVIL;
    });
    public static final Registry<RecipeType<?>> RECIPE_TYPE = create(RECIPE_TYPE_KEY, () -> {
       return RecipeType.CRAFTING;
    });
-   public static final Registry<RecipeSerializer<?>> RECIPE_SERIALIZER = create(RECIPE_SERIALIZER_KEY, () -> {
+   @Deprecated public static final Registry<RecipeSerializer<?>> RECIPE_SERIALIZER = forge(RECIPE_SERIALIZER_KEY, () -> {
       return RecipeSerializer.SHAPELESS;
    });
-   public static final Registry<EntityAttribute> ATTRIBUTE = create(ATTRIBUTE_KEY, () -> {
+   @Deprecated public static final Registry<EntityAttribute> ATTRIBUTE = forge(ATTRIBUTE_KEY, () -> {
       return EntityAttributes.GENERIC_LUCK;
    });
-   public static final Registry<StatType<?>> STAT_TYPE = create(STAT_TYPE_KEY, () -> {
+   @Deprecated public static final Registry<StatType<?>> STAT_TYPE = forge(STAT_TYPE_KEY, () -> {
       return Stats.USED;
    });
    public static final DefaultedRegistry<VillagerType> VILLAGER_TYPE = create(VILLAGER_TYPE_KEY, "plains", () -> {
       return VillagerType.PLAINS;
    });
-   public static final DefaultedRegistry<VillagerProfession> VILLAGER_PROFESSION = create(VILLAGER_PROFESSION_KEY, "none", () -> {
+   @Deprecated public static final DefaultedRegistry<VillagerProfession> VILLAGER_PROFESSION = forge(VILLAGER_PROFESSION_KEY, "none", () -> {
       return VillagerProfession.NONE;
    });
-   public static final DefaultedRegistry<PointOfInterestType> POINT_OF_INTEREST_TYPE = create(POINT_OF_INTEREST_TYPE_KEY, "unemployed", () -> {
+   @Deprecated public static final DefaultedRegistry<PointOfInterestType> POINT_OF_INTEREST_TYPE = forge(POINT_OF_INTEREST_TYPE_KEY, "unemployed", () -> {
       return PointOfInterestType.UNEMPLOYED;
    });
-   public static final DefaultedRegistry<MemoryModuleType<?>> MEMORY_MODULE_TYPE = create(MEMORY_MODULE_TYPE_KEY, "dummy", () -> {
+   @Deprecated public static final DefaultedRegistry<MemoryModuleType<?>> MEMORY_MODULE_TYPE = forge(MEMORY_MODULE_TYPE_KEY, "dummy", () -> {
       return MemoryModuleType.DUMMY;
    });
-   public static final DefaultedRegistry<SensorType<?>> SENSOR_TYPE = create(SENSOR_TYPE_KEY, "dummy", () -> {
+   @Deprecated public static final DefaultedRegistry<SensorType<?>> SENSOR_TYPE = forge(SENSOR_TYPE_KEY, "dummy", () -> {
       return SensorType.DUMMY;
    });
-   public static final Registry<Schedule> SCHEDULE = create(SCHEDULE_KEY, () -> {
+   @Deprecated public static final Registry<Schedule> SCHEDULE = forge(SCHEDULE_KEY, () -> {
       return Schedule.EMPTY;
    });
-   public static final Registry<Activity> ACTIVITY = create(ACTIVITY_KEY, () -> {
+   @Deprecated public static final Registry<Activity> ACTIVITY = forge(ACTIVITY_KEY, () -> {
       return Activity.IDLE;
    });
    public static final Registry<LootPoolEntryType> LOOT_POOL_ENTRY_TYPE = create(LOOT_POOL_ENTRY_TYPE_KEY, () -> {
@@ -233,19 +237,19 @@
    public static final RegistryKey<Registry<StructurePool>> TEMPLATE_POOL_WORLDGEN = createRegistryKey("worldgen/template_pool");
    public static final RegistryKey<Registry<Biome>> BIOME_KEY = createRegistryKey("worldgen/biome");
    public static final RegistryKey<Registry<SurfaceBuilder<?>>> SURFACE_BUILD_KEY = createRegistryKey("worldgen/surface_builder");
-   public static final Registry<SurfaceBuilder<?>> SURFACE_BUILDER = create(SURFACE_BUILD_KEY, () -> {
+   @Deprecated public static final Registry<SurfaceBuilder<?>> SURFACE_BUILDER = forge(SURFACE_BUILD_KEY, () -> {
       return SurfaceBuilder.DEFAULT;
    });
    public static final RegistryKey<Registry<Carver<?>>> CARVER_KEY = createRegistryKey("worldgen/carver");
-   public static final Registry<Carver<?>> CARVER = create(CARVER_KEY, () -> {
+   @Deprecated public static final Registry<Carver<?>> CARVER = forge(CARVER_KEY, () -> {
       return Carver.CAVE;
    });
    public static final RegistryKey<Registry<Feature<?>>> FEATURE_KEY = createRegistryKey("worldgen/feature");
-   public static final Registry<Feature<?>> FEATURE = create(FEATURE_KEY, () -> {
+   @Deprecated public static final Registry<Feature<?>> FEATURE = forge(FEATURE_KEY, () -> {
       return Feature.ORE;
    });
    public static final RegistryKey<Registry<StructureFeature<?>>> STRUCTURE_FEATURE_KEY = createRegistryKey("worldgen/structure_feature");
-   public static final Registry<StructureFeature<?>> STRUCTURE_FEATURE = create(STRUCTURE_FEATURE_KEY, () -> {
+   @Deprecated public static final Registry<StructureFeature<?>> STRUCTURE_FEATURE = forge(STRUCTURE_FEATURE_KEY, () -> {
       return StructureFeature.MINESHAFT;
    });
    public static final RegistryKey<Registry<StructurePieceType>> STRUCTURE_PIECE_KEY = createRegistryKey("worldgen/structure_piece");
@@ -253,7 +257,7 @@
       return StructurePieceType.MINESHAFT_ROOM;
    });
    public static final RegistryKey<Registry<Decorator<?>>> DECORATOR_KEY = createRegistryKey("worldgen/decorator");
-   public static final Registry<Decorator<?>> DECORATOR = create(DECORATOR_KEY, () -> {
+   @Deprecated public static final Registry<Decorator<?>> DECORATOR = forge(DECORATOR_KEY, () -> {
       return Decorator.NOPE;
    });
    public static final RegistryKey<Registry<BlockStateProviderType<?>>> BLOCK_STATE_PROVIDER_TYPE_KEY = createRegistryKey("worldgen/block_state_provider_type");
@@ -266,19 +270,19 @@
    public static final RegistryKey<Registry<Codec<? extends ChunkGenerator>>> CHUNK_GENERATOR_KEY = createRegistryKey("worldgen/chunk_generator");
    public static final RegistryKey<Registry<StructureProcessorType<?>>> STRUCTURE_PROCESSOR_KEY = createRegistryKey("worldgen/structure_processor");
    public static final RegistryKey<Registry<StructurePoolElementType<?>>> STRUCTURE_POOL_ELEMENT_KEY = createRegistryKey("worldgen/structure_pool_element");
-   public static final Registry<BlockStateProviderType<?>> BLOCK_STATE_PROVIDER_TYPE = create(BLOCK_STATE_PROVIDER_TYPE_KEY, () -> {
+   @Deprecated public static final Registry<BlockStateProviderType<?>> BLOCK_STATE_PROVIDER_TYPE = forge(BLOCK_STATE_PROVIDER_TYPE_KEY, () -> {
       return BlockStateProviderType.SIMPLE_STATE_PROVIDER;
    });
-   public static final Registry<BlockPlacerType<?>> BLOCK_PLACER_TYPE = create(BLOCK_PLACER_TYPE_KEY, () -> {
+   @Deprecated public static final Registry<BlockPlacerType<?>> BLOCK_PLACER_TYPE = forge(BLOCK_PLACER_TYPE_KEY, () -> {
       return BlockPlacerType.SIMPLE_BLOCK_PLACER;
    });
-   public static final Registry<FoliagePlacerType<?>> FOLIAGE_PLACER_TYPE = create(FOLIAGE_PLACER_TYPE_KEY, () -> {
+   @Deprecated public static final Registry<FoliagePlacerType<?>> FOLIAGE_PLACER_TYPE = forge(FOLIAGE_PLACER_TYPE_KEY, () -> {
       return FoliagePlacerType.BLOB_FOLIAGE_PLACER;
    });
    public static final Registry<TrunkPlacerType<?>> TRUNK_PLACER_TYPE = create(TRUNK_PLACER_TYPE_KEY, () -> {
       return TrunkPlacerType.STRAIGHT_TRUNK_PLACER;
    });
-   public static final Registry<TreeDecoratorType<?>> TREE_DECORATOR_TYPE = create(TREE_DECORATOR_TYPE_KEY, () -> {
+   @Deprecated public static final Registry<TreeDecoratorType<?>> TREE_DECORATOR_TYPE = forge(TREE_DECORATOR_TYPE_KEY, () -> {
       return TreeDecoratorType.LEAVE_VINE;
    });
    public static final Registry<FeatureSizeType<?>> FEATURE_SIZE_TYPE = create(FEATURE_SIZE_TYPE_KEY, () -> {
@@ -324,18 +328,34 @@
       return create(registryKey, Lifecycle.experimental(), supplier);
    }
 
+   private static <T extends net.minecraftforge.registries.IForgeRegistryEntry<T>> Registry<T> forge(RegistryKey<? extends Registry<T>> key, Supplier<T> def) {
+      return forge(key, Lifecycle.experimental(), def);
+   }
+
    private static <T> DefaultedRegistry<T> create(RegistryKey<? extends Registry<T>> registryKey, String defaultedValueKey, Supplier<T> supplier) {
       return create(registryKey, defaultedValueKey, Lifecycle.experimental(), supplier);
    }
 
+   private static <T extends net.minecraftforge.registries.IForgeRegistryEntry<T>> DefaultedRegistry<T> forge(RegistryKey<? extends Registry<T>> key, String defKey, Supplier<T> def) {
+      return forge(key, defKey, Lifecycle.experimental(), def);
+   }
+
    private static <T> Registry<T> create(RegistryKey<? extends Registry<T>> registryKey, Lifecycle lifecycle, Supplier<T> supplier) {
       return create(registryKey, new SimpleRegistry<>(registryKey, lifecycle), supplier, lifecycle);
    }
 
+   private static <T extends net.minecraftforge.registries.IForgeRegistryEntry<T>> Registry<T> forge(RegistryKey<? extends Registry<T>> key, Lifecycle cycle, Supplier<T> def) {
+      return create(key, net.minecraftforge.registries.GameData.getWrapper(key, cycle), def, cycle);
+   }
+
    private static <T> DefaultedRegistry<T> create(RegistryKey<? extends Registry<T>> registryKey, String defaultedValueKey, Lifecycle lifecycle, Supplier<T> supplier) {
       return create(registryKey, new DefaultedRegistry<>(defaultedValueKey, registryKey, lifecycle), supplier, lifecycle);
    }
 
+   private static <T extends net.minecraftforge.registries.IForgeRegistryEntry<T>> DefaultedRegistry<T> forge(RegistryKey<? extends Registry<T>> key, String defKey, Lifecycle cycle, Supplier<T> def) {
+      return create(key, net.minecraftforge.registries.GameData.getWrapper(key, cycle, defKey), def, cycle);
+   }
+
    private static <T, R extends MutableRegistry<T>> R create(RegistryKey<? extends Registry<T>> registryKey, R instance, Supplier<T> objectSupplier, Lifecycle lifecycle) {
       Identifier resourcelocation = registryKey.getValue();
       DEFAULT_ENTRIES.put(resourcelocation, objectSupplier);
