--- a/net/minecraft/loot/LootTable.java
+++ b/net/minecraft/loot/LootTable.java
@@ -35,13 +35,13 @@
    public static final LootTable EMPTY = new LootTable(LootContextTypes.EMPTY, new LootPool[0], new LootFunction[0]);
    public static final LootContextType GENERIC = LootContextTypes.GENERIC;
    private final LootContextType type;
-   private final LootPool[] pools;
+   private final List<LootPool> pools;
    private final LootFunction[] functions;
    private final BiFunction<ItemStack, LootContext, ItemStack> combinedFunction;
 
    private LootTable(LootContextType parameterSet, LootPool[] pools, LootFunction[] functions) {
       this.type = parameterSet;
-      this.pools = pools;
+      this.pools = Lists.newArrayList(pools);
       this.functions = functions;
       this.combinedFunction = LootFunctionTypes.join(functions);
    }
@@ -79,6 +79,7 @@
 
    }
 
+   @Deprecated //Use other method or manually call ForgeHooks.modifyLoot
    public void generateLoot(LootContext contextData, Consumer<ItemStack> stacksOut) {
       this.generateUnprocessedLoot(contextData, processStacks(stacksOut));
    }
@@ -86,6 +87,7 @@
    public List<ItemStack> generateLoot(LootContext context) {
       List<ItemStack> list = Lists.newArrayList();
       this.generateLoot(context, list::add);
+      list = net.minecraftforge.common.ForgeHooks.modifyLoot(list, context);
       return list;
    }
 
@@ -94,8 +96,8 @@
    }
 
    public void validate(LootTableReporter validator) {
-      for(int i = 0; i < this.pools.length; ++i) {
-         this.pools[i].validate(validator.makeChild(".pools[" + i + "]"));
+      for(int i = 0; i < this.pools.size(); ++i) {
+         this.pools.get(i).validate(validator.makeChild(".pools[" + i + "]"));
       }
 
       for(int j = 0; j < this.functions.length; ++j) {
@@ -177,6 +179,41 @@
       return new LootTable.Builder();
    }
 
+   //======================== FORGE START =============================================
+   private boolean isFrozen = false;
+   public void freeze() {
+      this.isFrozen = true;
+      this.pools.forEach(LootPool::freeze);
+   }
+   public boolean isFrozen(){ return this.isFrozen; }
+   private void checkFrozen() {
+      if (this.isFrozen())
+         throw new RuntimeException("Attempted to modify LootTable after being finalized!");
+   }
+
+   public LootPool getPool(String name) {
+      return pools.stream().filter(e -> name.equals(e.getName())).findFirst().orElse(null);
+   }
+
+   public LootPool removePool(String name) {
+      checkFrozen();
+      for (LootPool pool : this.pools) {
+         if (name.equals(pool.getName())) {
+            this.pools.remove(pool);
+            return pool;
+         }
+      }
+      return null;
+   }
+
+   public void addPool(LootPool pool) {
+      checkFrozen();
+      if (pools.stream().anyMatch(e -> e == pool || e.getName().equals(pool.getName())))
+         throw new RuntimeException("Attempted to add a duplicate pool to loot table: " + pool.getName());
+      this.pools.add(pool);
+   }
+   //======================== FORGE END ===============================================
+
    public static class Builder implements LootFunctionConsumingBuilder<LootTable.Builder> {
       private final List<LootPool> pools = Lists.newArrayList();
       private final List<LootFunction> functions = Lists.newArrayList();
@@ -231,7 +268,7 @@
             }
          }
 
-         if (p_serialize_1_.pools.length > 0) {
+         if (!p_serialize_1_.pools.isEmpty()) {
             jsonobject.add("pools", p_serialize_3_.serialize(p_serialize_1_.pools));
          }
 
