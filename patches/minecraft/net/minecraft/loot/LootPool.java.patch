--- a/net/minecraft/loot/LootPool.java
+++ b/net/minecraft/loot/LootPool.java
@@ -29,17 +29,19 @@
 import org.apache.commons.lang3.mutable.MutableInt;
 
 public class LootPool {
-   private final LootPoolEntry[] entries;
-   private final LootCondition[] conditions;
+   private final String name;
+   private final List<LootPoolEntry> entries;
+   private final List<LootCondition> conditions;
    private final Predicate<LootContext> predicate;
    private final LootFunction[] functions;
    private final BiFunction<ItemStack, LootContext, ItemStack> javaFunctions;
    private LootTableRange rolls;
    private UniformLootTableRange bonusRolls;
 
-   private LootPool(LootPoolEntry[] p_i51268_1_, LootCondition[] p_i51268_2_, LootFunction[] p_i51268_3_, LootTableRange p_i51268_4_, UniformLootTableRange p_i51268_5_) {
-      this.entries = p_i51268_1_;
-      this.conditions = p_i51268_2_;
+   private LootPool(LootPoolEntry[] p_i51268_1_, LootCondition[] p_i51268_2_, LootFunction[] p_i51268_3_, LootTableRange p_i51268_4_, UniformLootTableRange p_i51268_5_, String name) {
+      this.name = name;
+      this.entries = Lists.newArrayList(p_i51268_1_);
+      this.conditions = Lists.newArrayList(p_i51268_2_);
       this.predicate = LootConditionTypes.joinAnd(p_i51268_2_);
       this.functions = p_i51268_3_;
       this.javaFunctions = LootFunctionTypes.join(p_i51268_3_);
@@ -96,19 +98,33 @@
    }
 
    public void validate(LootTableReporter p_227505_1_) {
-      for(int i = 0; i < this.conditions.length; ++i) {
-         this.conditions[i].validate(p_227505_1_.makeChild(".condition[" + i + "]"));
+      for(int i = 0; i < this.conditions.size(); ++i) {
+         this.conditions.get(i).validate(p_227505_1_.makeChild(".condition[" + i + "]"));
       }
 
       for(int j = 0; j < this.functions.length; ++j) {
          this.functions[j].validate(p_227505_1_.makeChild(".functions[" + j + "]"));
       }
 
-      for(int k = 0; k < this.entries.length; ++k) {
-         this.entries[k].validate(p_227505_1_.makeChild(".entries[" + k + "]"));
+      for(int k = 0; k < this.entries.size(); ++k) {
+         this.entries.get(k).validate(p_227505_1_.makeChild(".entries[" + k + "]"));
       }
 
    }
+   //======================== FORGE START =============================================
+   private boolean isFrozen = false;
+   public void freeze() { this.isFrozen = true; }
+   public boolean isFrozen(){ return this.isFrozen; }
+   private void checkFrozen() {
+      if (this.isFrozen())
+         throw new RuntimeException("Attempted to modify LootPool after being frozen!");
+   }
+   public String getName(){ return this.name; }
+   public LootTableRange getRolls()      { return this.rolls; }
+   public LootTableRange getBonusRolls() { return this.bonusRolls; }
+   public void setRolls     (UniformLootTableRange v){ checkFrozen(); this.rolls = v; }
+   public void setBonusRolls(UniformLootTableRange v){ checkFrozen(); this.bonusRolls = v; }
+   //======================== FORGE END ===============================================
 
    public static LootPool.Builder builder() {
       return new LootPool.Builder();
@@ -120,6 +136,7 @@
       private final List<LootFunction> functions = Lists.newArrayList();
       private LootTableRange rolls = new UniformLootTableRange(1.0F);
       private UniformLootTableRange bonusRollsRange = new UniformLootTableRange(0.0F, 0.0F);
+      private String name;
 
       public LootPool.Builder rolls(LootTableRange rollsIn) {
          this.rolls = rollsIn;
@@ -145,11 +162,21 @@
          return this;
       }
 
+      public LootPool.Builder name(String name) {
+         this.name = name;
+         return this;
+      }
+
+      public LootPool.Builder bonusRolls(float min, float max) {
+         this.bonusRollsRange = new UniformLootTableRange(min, max);
+         return this;
+      }
+
       public LootPool build() {
          if (this.rolls == null) {
             throw new IllegalArgumentException("Rolls not set");
          } else {
-            return new LootPool(this.entries.toArray(new LootPoolEntry[0]), this.conditions.toArray(new LootCondition[0]), this.functions.toArray(new LootFunction[0]), this.rolls, this.bonusRollsRange);
+            return new LootPool(this.entries.toArray(new LootPoolEntry[0]), this.conditions.toArray(new LootCondition[0]), this.functions.toArray(new LootFunction[0]), this.rolls, this.bonusRollsRange, name);
          }
       }
    }
@@ -162,18 +189,20 @@
          LootFunction[] ailootfunction = JsonHelper.deserialize(jsonobject, "functions", new LootFunction[0], p_deserialize_3_, LootFunction[].class);
          LootTableRange irandomrange = LootTableRanges.fromJson(jsonobject.get("rolls"), p_deserialize_3_);
          UniformLootTableRange randomvaluerange = JsonHelper.deserialize(jsonobject, "bonus_rolls", new UniformLootTableRange(0.0F, 0.0F), p_deserialize_3_, UniformLootTableRange.class);
-         return new LootPool(alootentry, ailootcondition, ailootfunction, irandomrange, randomvaluerange);
+         return new LootPool(alootentry, ailootcondition, ailootfunction, irandomrange, randomvaluerange, net.minecraftforge.common.ForgeHooks.readPoolName(jsonobject));
       }
 
       public JsonElement serialize(LootPool p_serialize_1_, Type p_serialize_2_, JsonSerializationContext p_serialize_3_) {
          JsonObject jsonobject = new JsonObject();
+         if (p_serialize_1_.name != null && !p_serialize_1_.name.startsWith("custom#"))
+            jsonobject.add("name", p_serialize_3_.serialize(p_serialize_1_.name));
          jsonobject.add("rolls", LootTableRanges.toJson(p_serialize_1_.rolls, p_serialize_3_));
          jsonobject.add("entries", p_serialize_3_.serialize(p_serialize_1_.entries));
          if (p_serialize_1_.bonusRolls.getMinValue() != 0.0F && p_serialize_1_.bonusRolls.getMaxValue() != 0.0F) {
             jsonobject.add("bonus_rolls", p_serialize_3_.serialize(p_serialize_1_.bonusRolls));
          }
 
-         if (!ArrayUtils.isEmpty((Object[])p_serialize_1_.conditions)) {
+         if (!p_serialize_1_.conditions.isEmpty()) {
             jsonobject.add("conditions", p_serialize_3_.serialize(p_serialize_1_.conditions));
          }
 
